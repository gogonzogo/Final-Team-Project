{"version":3,"file":"static/js/651.24874bc6.chunk.js","mappings":"oJAEMA,EAAY,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,UAC1B,OACI,gBAAKA,UAAWA,EAAhB,SAA4BD,GAEnC,EAEDD,EAAUG,UAAY,CAClBF,SAAUG,EAAAA,KAAAA,WACVF,UAAWG,EAAAA,QAGf,K,0KCZA,EAAsB,2BAAtB,EAA0D,8BAA1D,EAAsG,mCAAtG,EAAuJ,mCAAvJ,EAAwM,mCAAxM,EAAwP,kCAAxP,EAAuS,kCAAvS,EAAgV,4BAAhV,EAAsX,+B,uFC6StX,MA9RA,SAAuBC,GACnB,IAYIC,EAZJ,GAAgCC,EAAAA,EAAAA,UAASF,EAAMG,aAAaC,aAA5D,eAAOC,EAAP,KAAiBC,EAAjB,KACMC,EAAWP,EAAMG,aAAaI,SAC9BC,EAAWR,EAAMG,aAAaM,eACpC,GAAgCP,EAAAA,EAAAA,UAASF,EAAMG,aAAaO,cAA5D,eAAOC,EAAP,KAAiBC,EAAjB,KACMC,GAAWC,EAAAA,EAAAA,MACjB,GAAsCZ,EAAAA,EAAAA,UAAS,GAA/C,eAAOa,EAAP,KAAoBC,EAApB,KACA,GAAgCd,EAAAA,EAAAA,WAAS,GAAzC,eAAOe,EAAP,KAAiBC,EAAjB,KACA,GAAoChB,EAAAA,EAAAA,WAAS,GAA7C,eAAOiB,EAAP,KAAmBC,EAAnB,KACA,GAAoClB,EAAAA,EAAAA,WAAS,GAA7C,eAAOmB,EAAP,KAAmBC,EAAnB,KACMC,IAAoBC,EAAAA,EAAAA,QAAO,MAC3BC,IAAYC,EAAAA,EAAAA,IAAYC,EAAAA,GACxBC,IAAWJ,EAAAA,EAAAA,UAEbK,GAAQ,iBAAaxB,EAAS,GAAGyB,UAAzB,YAAsCzB,EAAS,GAAG0B,QAAlD,QACZC,QAAQC,IAAI,WAAYJ,KAGxBK,EAAAA,EAAAA,YAAU,WACFb,GAAcE,GAAkBY,SAEhCZ,GAAkBY,SAEzB,GAAE,CAACd,IAIJ,IAAMe,IAAcC,EAAAA,EAAAA,iBAAgB,CAChCC,QAAS,kBAAMV,GAASO,OAAf,EACTI,mBAAoB,WAKhB,OAJAtC,EAAWwB,GACXZ,GAAS2B,EAAAA,EAAAA,IAAa,UACtBtB,GAAY,GACZE,GAAc,GACP,IAAIqB,SAAQ,SAACC,GAChBnB,GAAkBY,QAAUO,EAC5BpB,GAAc,EACjB,GACJ,EACDqB,aAAc,WAEV9B,GAAS2B,EAAAA,EAAAA,IAAavC,IACtBiB,GAAY,GACZE,GAAc,GACdG,GAAkBY,QAAU,KAC5Bb,GAAc,EACjB,IAICsB,IAAaP,EAAAA,EAAAA,iBAAgB,CAC/BC,QAAS,kBAAMV,GAASO,OAAf,EACTI,mBAAoB,WAKhB,OAJAtC,EAAWwB,GACXZ,GAAS2B,EAAAA,EAAAA,IAAa,UACtBtB,GAAY,GACZE,GAAc,GACP,IAAIqB,SAAQ,SAACC,GAChBnB,GAAkBY,QAAUO,EAC5BpB,GAAc,EACjB,GACJ,EACDqB,aAAc,WAEV9B,GAAS2B,EAAAA,EAAAA,IAAavC,IACtBiB,GAAY,GACZE,GAAc,GACdG,GAAkBY,QAAU,KAC5Bb,GAAc,EACjB,EACDuB,kBAAkB,EAClBC,MAAM,WAAD,wBAAE,WAAOC,GAAP,2EACGC,EAAWD,EAAYE,gBACvBC,EAAM,CACRC,OAAQ,GACRC,SAAUvB,GACVwB,MAAO,CAAEC,KAAM,OAAQC,QAAS,KAChCC,YAAa,CAAEC,MAAO,GACtBC,MAAO,CAAEC,KAAM,KAAMC,OAAQ,SAAUC,YAAa,aAEpDb,IACMc,EAAOd,EAASe,eAAe,8BACrC/B,QAAQC,IAAI6B,GACK,IAAIE,IAAJ,CAAaF,EAAMZ,GAC3Be,QAAO,IAbjB,2CAAF,mDAAC,KAmBJC,GAAa,mCAAG,6FAIZC,EAAe,CACjBC,YAAa/D,EAAS,GAAG+D,YACzBtC,UAAWzB,EAAS,GAAGyB,UACvBC,QAAS1B,EAAS,GAAG0B,SAPP,SAUKlB,GAASwD,EAAAA,EAAAA,IAAoBF,IAVlC,OAUZG,EAVY,OAWlB1D,EAAY0D,EAASC,QAAQ7D,cAXX,2CAAH,qDAeb8D,GAAY,mCAAG,WAAMC,GAAN,kFACTC,EAAUD,EAAEE,OAAZD,MACR1D,EAAeyD,EAAEE,OAAOD,OAClBE,EAAc,CAChBR,YAAazD,EAAS+D,GAAOG,IAAIT,YACjCtC,UAAWnB,EAAS+D,GAAOG,IAAI/C,UAC/BC,QAASpB,EAAS+D,GAAOG,IAAI9C,SANhB,SAQMlB,GAASiE,EAAAA,EAAAA,IAAmBF,IARlC,QAQXN,EARW,UAUbhE,EAAYgE,EAASC,QAAQQ,mBAC7BlD,GAAQ,iBAAalB,EAAS+D,GAAOG,IAAI/C,UAAjC,YAA8CnB,EAAS+D,GAAOG,IAAI9C,QAAlE,QACRC,QAAQC,IAAI,WAAYJ,KAZX,2CAAH,sDAqBdmD,GAAY,GAQhB,OANArE,EAASsE,SAAQ,SAAUC,EAASC,GAChCH,GAAUI,MAAK,UAACC,EAAA,EAAD,CAAsBX,MAAOS,EAA7B,UAAqC,gBAAcD,EAAQL,IAAIT,YAAY,QAChFc,EAAQL,IAAI/C,UAAU,QAAMoD,EAAQL,IAAI9C,QAAQ,MAD5BoD,GAGjC,KAGG,+BACI,iBAAKvF,UAAW0F,EAAhB,WAEI,4BACI,wBAAI,qBACJ,SAACC,EAAA,EAAD,CACIC,GAAI,CACAC,UAAW,EACXC,MAAO,IACPC,OAAQ,IAEZjB,MAAO3D,EACP6E,SAAUpB,GAPd,SASKQ,SAIT,iBAAKa,IAAKjE,GAAUkE,GAAG,6BAAvB,UAEK7E,IACG,gBAAKrB,UAAW0F,EAAhB,UACI,SAAC,IAAD,CACI1F,UAAWmG,EAAAA,EAAAA,UACXC,IAAI,+CAKhB,eAAIpG,UAAW0F,EAAf,SAA+B,gCAC/B,gBAAI1F,UAAW0F,EAAf,UAAgC/E,EAAS,GAAG0F,KAAK,OAAK1F,EAAS,GAAG2F,MAAM,QACxE,gBAAItG,UAAW0F,EAAf,UAA+B,eAAajF,EAAS,GAAG+D,gBACxD,gBAAIxE,UAAW0F,EAAf,UAAgCjF,EAAS,GAAGyB,UAAU,YAAUzB,EAAS,GAAG0B,WAGL,MAAtEvB,EAAS,GAAG2F,kBAAkB,GAAGC,gBAAgB,GAAGC,eACjD,iCACI,gBAAIzG,UAAW0F,EAAf,UAA+B,YAAU9E,EAAS,GAAG2F,kBAAkB,GAAGC,gBAAgB,GAAGT,OAAOW,WAAW,aAAW9F,EAAS,GAAG2F,kBAAkB,GAAGC,gBAAgB,GAAGG,IAAID,WAAW,kBAAgB9F,EAAS,GAAG2F,kBAAkB,GAAGC,gBAAgB,GAAGI,UAAU,QAC3Q,gBAAI5G,UAAW0F,EAAf,UAA+B,oBAAkB9E,EAAS,GAAG2F,kBAAkB,GAAGC,gBAAgB,GAAGK,cAAcH,WAAW,wBAAsB9F,EAAS,GAAG2F,kBAAkB,GAAGC,gBAAgB,GAAGM,cAAcJ,WAAW,YAErO,iCACI,gBAAI1G,UAAW0F,EAAf,UAA+B,YAAU9E,EAAS,GAAG2F,kBAAkB,GAAGC,gBAAgB,GAAGO,WAAWL,WAAW,UAAQ9F,EAAS,GAAG2F,kBAAkB,GAAGC,gBAAgB,GAAGQ,WAAWN,WAAW,mBAAiB9F,EAAS,GAAG2F,kBAAkB,GAAGC,gBAAgB,GAAGG,IAAID,WAAW,kBAAgB9F,EAAS,GAAG2F,kBAAkB,GAAGC,gBAAgB,GAAGI,UAAU,QACvW,gBAAI5G,UAAW0F,EAAf,UAA+B,oBAAkB9E,EAAS,GAAG2F,kBAAkB,GAAGC,gBAAgB,GAAGS,iBAAiBP,WAAW,2BAAyB9F,EAAS,GAAG2F,kBAAkB,GAAGC,gBAAgB,GAAGU,iBAAiBR,WAAW,YAQjPjG,EAAS0G,KAAI,SAACC,EAAM7B,GAAP,OAEV,4BAMI,gBAAKvF,UAAW0F,EAAhB,UACI,gBAA0B1F,UAAW0F,EAArC,UAAqD,IAAE0B,EAAKC,OAA5D,eAAiB9B,OAErB,iBAA+BvF,UAAW0F,EAA1C,WACI,eAA+B1F,UAAW0F,EAA1C,SAA4D,aAA5D,oBAAsBH,KACtB,eAAgCvF,UAAW0F,EAA3C,SAA4D,UAA5D,qBAAuBH,KACvB,eAA+BvF,UAAW0F,EAA1C,SAA2D,YAA3D,oBAAsBH,MAH1B,mBAAsBA,IAMrB6B,EAAKE,UAAUH,KAAI,SAACI,EAAMC,GAAP,OAChB,+BACI,iBAAKxH,UAAW0F,EAAhB,WAEI,cAA0B1F,UAAW0F,EAArC,SAAuD6B,EAAKE,OAA5D,gBAAiBD,KACjB,cAA2BxH,UAAW0F,EAAtC,SAAwD6B,EAAKG,QAA7D,iBAAkBF,KAClB,cAA6BxH,UAAW0F,EAAxC,SAA0D6B,EAAKI,UAA/D,mBAAoBH,MAJxB,qBAA4CA,KAFhC,KAapB,iBAAgCxH,UAAW0F,EAA3C,WACI,cAAmC1F,UAAW0F,EAA9C,SAA+D,eAA/D,yBAA0BH,KAG1B,cAAsCvF,UAAW0F,EAAjD,SAAkE,qBAAlE,4BAA6BH,KAG7B,cAAuCvF,UAAW0F,EAAlD,SAAmE,sBAAnE,6BAA8BH,MAPlC,oBAAuBA,KAWvB,iBAAgCvF,UAAW0F,EAA3C,WACI,cAAkC1F,UAAW0F,EAA7C,SACKkC,KAAKC,MAAuB,IAAjBT,EAAKU,WAAmB,KADxC,wBAAyBvC,KAGzB,cAAqCvF,UAAW0F,EAAhD,UACMkC,KAAKC,MAEC,IAFKT,EAAKE,UAAUS,QAAO,SAAUC,EAAMC,GAC/C,OAAOD,EAAOC,EAAIN,QACrB,GAAE,IAAY,KAAKO,QAAQ,IAHhC,2BAA4B3C,KAK5B,cAAsCvF,UAAW0F,EAAjD,UACMkC,KAAKC,MAEG,KAFIT,EAAKU,UAAaV,EAAKE,UAAUS,QAAO,SAAUC,EAAMC,GAClE,OAAOD,EAAOC,EAAIN,QACrB,GAAE,KAAc,KAAKO,QAAQ,IAHlC,4BAA6B3C,MATjC,oBAAuBA,MAvC3B,sBAAyBA,GAFf,KA6Dd,iBAAKvF,UAAW0F,EAAhB,UACKnE,IACG,SAAC4G,EAAA,EAAD,CAAcC,QAAS,WACnB5F,IACH,EACG6F,MAAM,SACNC,KAAK,UAJT,SAMC,kBAIJ/G,IACG,SAAC4G,EAAA,EAAD,CAAcC,QAAS9D,GACnB+D,MAAM,SACNC,KAAK,UAFT,SAIC,oBAIJ/G,IACG,SAAC4G,EAAA,EAAD,CAAcC,QAAS,WACnBpF,IACH,EACGqF,MAAM,SACNC,KAAK,UAJT,SAOC,0BAS5B,E,UCzRD,MAdA,WACI,IACM/H,GADWgI,EAAAA,EAAAA,MACaC,MAC9B,OACI,gBAAKxI,UAAU,kCAAf,UACI,8BACI,SAACF,EAAA,EAAD,WACI,SAAC,EAAD,CAAeS,aAAcA,SAKhD,C","sources":["components/Container/Container.jsx","webpack://final-team-project/./src/components/Archive/ArchiveByDate.module.css?7ee4","components/Archive/ArchiveByDate.jsx","pages/Archive/Archive.jsx"],"sourcesContent":["import { node, string } from 'prop-types';\n\nconst Container = ({children, className}) => {\n    return (\n        <div className={className}>{children}</div>\n    )\n};\n\nContainer.propTopes = {\n    children: node.isRequired,\n    className: string\n};\n\nexport default Container ;","// extracted by mini-css-extract-plugin\nexport default {\"row\":\"ArchiveByDate_row__pxg8K\",\"report\":\"ArchiveByDate_report__4lH9R\",\"firstColumn\":\"ArchiveByDate_firstColumn__JwJr2\",\"otherColumn\":\"ArchiveByDate_otherColumn__ZPyWC\",\"totalColumn\":\"ArchiveByDate_totalColumn__U6yrO\",\"centerText\":\"ArchiveByDate_centerText__vQ3vN\",\"dateHeader\":\"ArchiveByDate_dateHeader__eUO3c\",\"logo\":\"ArchiveByDate_logo__fmLy8\",\"buttons\":\"ArchiveByDate_buttons__m83ei\"};","\nimport { Select, MenuItem } from \"@mui/material\";\nimport { useState, useEffect } from \"react\";\nimport { getArchiveDateinfo } from '../../redux/user/userOperations';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport css from './ArchiveByDate.module.css';\nimport React, { useRef } from 'react';\nimport { useReactToPrint } from 'react-to-print';\nimport CustomButton from 'components/CustomButton/CustomButton';\nimport { ReactComponent as LogoSVG } from '../Logo/slimmom.svg';\nimport styles from '../Logo/ImageLogo.module.css';\nimport { setThemeMode } from \"redux/theme/themeSlice\";\nimport { selectThemeMode } from \"redux/theme/themeSelectors\";\nimport { restoreDairyArchive } from 'redux/user/userOperations';\nimport Html2Pdf from 'js-html2pdf';\n\nfunction ArchiveByDate(props) {\n    const [diaryinf, setDiaryinf] = useState(props.archivesData.archiveinfo)\n    const userinfo = props.archivesData.userinfo\n    const calcinfo = props.archivesData.calculatorInfo\n    const [alldates, setAlldates] = useState(props.archivesData.archiveDates)\n    const dispatch = useDispatch();\n    const [archivePick, setArchivePick] = useState(0);\n    const [showLogo, setShowLogo] = useState(false)\n    const [showButton, setShowButton] = useState(true)\n    const [isPrinting, setIsPrinting] = useState(false);\n    const promiseResolveRef = useRef(null);\n    const themeMode = useSelector(selectThemeMode);\n    const printRef = useRef();\n    let holdMode\n    let fileName = `archive${diaryinf[0].startDate}-${diaryinf[0].endDate}.pdf`\n    console.log('fileName', fileName)\n\n\n    useEffect(() => {\n        if (isPrinting && promiseResolveRef.current) {\n            // Resolves the Promise, letting `react-to-print` know that the DOM updates are completed\n            promiseResolveRef.current();\n        }\n    }, [isPrinting]);\n\n\n\n    const handlePrint = useReactToPrint({\n        content: () => printRef.current,\n        onBeforeGetContent: () => {\n            holdMode = themeMode\n            dispatch(setThemeMode('light'));\n            setShowLogo(true)\n            setShowButton(false)\n            return new Promise((resolve) => {\n                promiseResolveRef.current = resolve;\n                setIsPrinting(true);\n            });\n        },\n        onAfterPrint: () => {\n            // Reset the Promise resolve so we can print again\n            dispatch(setThemeMode(holdMode));\n            setShowLogo(false)\n            setShowButton(true)\n            promiseResolveRef.current = null;\n            setIsPrinting(false);\n        },\n    });\n\n\n    const handleSave = useReactToPrint({\n        content: () => printRef.current,\n        onBeforeGetContent: () => {\n            holdMode = themeMode\n            dispatch(setThemeMode('light'));\n            setShowLogo(true)\n            setShowButton(false)\n            return new Promise((resolve) => {\n                promiseResolveRef.current = resolve;\n                setIsPrinting(true);\n            });\n        },\n        onAfterPrint: () => {\n            // Reset the Promise resolve so we can print again\n            dispatch(setThemeMode(holdMode));\n            setShowLogo(false)\n            setShowButton(true)\n            promiseResolveRef.current = null;\n            setIsPrinting(false);\n        },\n        removeAfterPrint: true,\n        print: async (printIframe) => {\n            const document = printIframe.contentDocument;\n            const opt = {\n                margin: .5,\n                filename: fileName,\n                image: { type: 'jpeg', quality: 0.98 },\n                html2canvas: { scale: 2 },\n                jsPDF: { unit: 'in', format: 'letter', orientation: 'portrait' }\n            };\n            if (document) {\n                const html = document.getElementById(\"element-to-download-as-pdf\");\n                console.log(html);\n                const exporter = new Html2Pdf(html, opt);\n                exporter.getPdf(true);\n            }\n        },\n\n\n    });\n    const handleRestore = async () => {\n\n\n\n        const restoreDates = {\n            archiveDate: diaryinf[0].archiveDate,\n            startDate: diaryinf[0].startDate,\n            endDate: diaryinf[0].endDate\n        }\n\n        const response = await dispatch(restoreDairyArchive(restoreDates));\n        setAlldates(response.payload.archiveDates)\n\n    }\n\n    const handleChange = async e => {\n        const { value } = e.target;\n        setArchivePick(e.target.value);\n        const Archiveinfo = {\n            archiveDate: alldates[value]._id.archiveDate,\n            startDate: alldates[value]._id.startDate,\n            endDate: alldates[value]._id.endDate\n        }\n        const response = await dispatch(getArchiveDateinfo(Archiveinfo));\n        if (response) {\n            setDiaryinf(response.payload.archiveReturnData)\n            fileName = `archive${alldates[value]._id.startDate}-${alldates[value]._id.endDate}.pdf`\n            console.log('fileName', fileName)\n\n        }\n\n\n    }\n\n\n\n    let menuItems = [];\n\n    alldates.forEach(function (alldate, index) {\n        menuItems.push(<MenuItem key={index} value={index} >Archive Date {alldate._id.archiveDate}\n            From {alldate._id.startDate} To  {alldate._id.endDate} </MenuItem>)\n\n    })\n\n    return (\n        <>\n            <div className={css.report}>\n\n                <div>\n                    <h1>archive by date</h1>\n                    <Select\n                        sx={{\n                            marginTop: 0,\n                            width: 700,\n                            height: 20,\n                        }}\n                        value={archivePick}\n                        onChange={handleChange}\n                    >\n                        {menuItems}\n                    </Select>\n                </div>\n\n                <div ref={printRef} id='element-to-download-as-pdf'>\n\n                    {showLogo &&\n                        <div className={css.logo}>\n                            <LogoSVG\n                                className={styles.imageLogo}\n                                alt=\"A waistline with a green measuring tape\"\n                            />\n                        </div>}\n\n\n                    <h3 className={css.centerText}>Dairy Archive Summary for </h3>\n                    <h5 className={css.centerText}>{userinfo[0].name}   ({userinfo[0].email})</h5>\n                    <h5 className={css.centerText}>Archived on {diaryinf[0].archiveDate}</h5>\n                    <h5 className={css.centerText}>{diaryinf[0].startDate} through {diaryinf[0].endDate}</h5>\n\n\n                    {calcinfo[0].calculatorEntries[0].calculatorEntry[0].unitOfMeasure !== \"S\" ?\n                        <>\n                            <h5 className={css.centerText}>Height:  {calcinfo[0].calculatorEntries[0].calculatorEntry[0].height.toString()}cm  Age:  {calcinfo[0].calculatorEntries[0].calculatorEntry[0].age.toString()}  BloodType:   {calcinfo[0].calculatorEntries[0].calculatorEntry[0].bloodType} </h5>\n                            <h5 className={css.centerText}>Current Weight:  {calcinfo[0].calculatorEntries[0].calculatorEntry[0].currentWeight.toString()}kg  Desired Weight:  {calcinfo[0].calculatorEntries[0].calculatorEntry[0].desiredWeight.toString()}kg</h5>\n                        </> :\n                        <>\n                            <h5 className={css.centerText}>Height:  {calcinfo[0].calculatorEntries[0].calculatorEntry[0].heightFeet.toString()}  feet {calcinfo[0].calculatorEntries[0].calculatorEntry[0].heightInch.toString()}  inches  Age:  {calcinfo[0].calculatorEntries[0].calculatorEntry[0].age.toString()}  BloodType:   {calcinfo[0].calculatorEntries[0].calculatorEntry[0].bloodType} </h5>\n                            <h5 className={css.centerText}>Current Weight:  {calcinfo[0].calculatorEntries[0].calculatorEntry[0].currentWeightLbs.toString()}lbs    Desired Weight:  {calcinfo[0].calculatorEntries[0].calculatorEntry[0].desiredWeightLbs.toString()}lbs</h5>\n                        </>\n\n                    }\n\n\n\n\n                    {diaryinf.map((item, index) => (\n\n                        <div key={`archiveDate-${index}`}>\n\n                            {/* {dayCalories = 0}\n                            {dairyRate = item.dailyRate} */}\n\n\n                            <div className={css.row}>\n                                <h4 key={`date-${index}`} className={css.dateHeader}> {item.date}</h4>\n                            </div>\n                            <div key={`rowTitle-${index}`} className={css.row}>\n                                <h4 key={`FoodTitle-${index}`} className={css.firstColumn} >Food Name</h4>\n                                <h4 key={`gramsTitle-${index}`} className={css.otherColumn}> Grams</h4>\n                                <h4 key={`calsTitle-${index}`} className={css.otherColumn}>Calories</h4>\n                            </div>\n\n                            {item.foodItems.map((food, rowID) =>\n                                <>\n                                    <div className={css.row} key={`foodGeroup-${rowID}`}>\n\n                                        <p key={`title-${rowID}`} className={css.firstColumn}>{food.title}</p>\n                                        <p key={`weight-${rowID}`} className={css.otherColumn}>{food.weight}</p>\n                                        <p key={`calories-${rowID}`} className={css.otherColumn}>{food.calories}</p>\n                                    </div>\n                                    {/* {dayCalories = dayCalories + food.calories} */}\n\n                                </>\n                            )}\n\n                            <div key={`totalHead-${index}`} className={css.row}>\n                                <p key={`totalHeadDaily-${index}`} className={css.totalColumn}>\n                                    Daily Rate:\n                                </p>\n                                <p key={`totalHeadconsumed-${index}`} className={css.totalColumn}>\n                                    Calories consumed\n                                </p>\n                                <p key={`totalHeadRemaining-${index}`} className={css.totalColumn}>\n                                    Remaining calories\n                                </p>\n                            </div>\n                            <div key={`totalamtd-${index}`} className={css.row}>\n                                <p key={`totalamtDaily-${index}`} className={css.totalColumn}>\n                                    {Math.round(item.dailyRate * 100) / 100}\n                                </p>\n                                <p key={`totalamtconsumed-${index}`} className={css.totalColumn}>\n                                    {(Math.round(item.foodItems.reduce(function (prev, cur) {\n                                        return prev + cur.calories;\n                                    }, 0) * 100) / 100).toFixed(2)}\n                                </p>\n                                <p key={`totalamtRemaining-${index}`} className={css.totalColumn}>\n                                    {(Math.round((item.dailyRate - (item.foodItems.reduce(function (prev, cur) {\n                                        return prev + cur.calories;\n                                    }, 0))) * 100) / 100).toFixed(2)}\n                                </p>\n\n                            </div>\n\n\n                        </div>\n                    ))}\n                    <div className={css.buttons}>\n                        {showButton &&\n                            <CustomButton onClick={() => {\n                                handlePrint();\n                            }}\n                                color=\"orange\"\n                                size=\"archive\"\n\n                            >\n                                Print Summary\n                            </CustomButton>\n                        }\n                        {showButton &&\n                            <CustomButton onClick={handleRestore}\n                                color=\"orange\"\n                                size=\"archive\"\n\n                            >\n                                Restore Archive\n                            </CustomButton>\n                        }\n                        {showButton &&\n                            <CustomButton onClick={() => {\n                                handleSave();\n                            }}\n                                color=\"orange\"\n                                size=\"archive\"\n\n\n                            >\n                                Save as PDF\n                            </CustomButton>\n                        }\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default ArchiveByDate;\n","import { useLocation } from 'react-router-dom';\nimport ArchiveByDate from '../../components/Archive/ArchiveByDate';\nimport Container from 'components/Container/Container'\n\n\nfunction Archive() {\n    const location = useLocation();\n    const archivesData = location.state;\n    return (\n        <div className=\"background Calc-DairyBackground\">\n            <section >\n                <Container>\n                    <ArchiveByDate archivesData={archivesData} />\n                </Container>\n            </section>\n        </div>\n    )\n}\n\nexport default Archive;"],"names":["Container","children","className","propTopes","node","string","props","holdMode","useState","archivesData","archiveinfo","diaryinf","setDiaryinf","userinfo","calcinfo","calculatorInfo","archiveDates","alldates","setAlldates","dispatch","useDispatch","archivePick","setArchivePick","showLogo","setShowLogo","showButton","setShowButton","isPrinting","setIsPrinting","promiseResolveRef","useRef","themeMode","useSelector","selectThemeMode","printRef","fileName","startDate","endDate","console","log","useEffect","current","handlePrint","useReactToPrint","content","onBeforeGetContent","setThemeMode","Promise","resolve","onAfterPrint","handleSave","removeAfterPrint","print","printIframe","document","contentDocument","opt","margin","filename","image","type","quality","html2canvas","scale","jsPDF","unit","format","orientation","html","getElementById","Html2Pdf","getPdf","handleRestore","restoreDates","archiveDate","restoreDairyArchive","response","payload","handleChange","e","value","target","Archiveinfo","_id","getArchiveDateinfo","archiveReturnData","menuItems","forEach","alldate","index","push","MenuItem","css","Select","sx","marginTop","width","height","onChange","ref","id","styles","alt","name","email","calculatorEntries","calculatorEntry","unitOfMeasure","toString","age","bloodType","currentWeight","desiredWeight","heightFeet","heightInch","currentWeightLbs","desiredWeightLbs","map","item","date","foodItems","food","rowID","title","weight","calories","Math","round","dailyRate","reduce","prev","cur","toFixed","CustomButton","onClick","color","size","useLocation","state"],"sourceRoot":""}