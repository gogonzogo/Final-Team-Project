{"version":3,"file":"static/js/994.200d1b9f.chunk.js","mappings":"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","sources":["webpack://final-team-project/./src/components/CaloriesCalc/CaloriesCalc.module.css?baa3","components/CaloriesCalc/CaloriesCalc.jsx","components/Container/Container.jsx","components/Modal/ListWithScroll.jsx","components/Modal/DailyRateModal.jsx","components/Modal/DiaryModal.jsx","components/Modal/Modal.jsx","components/ValidationPopup/ValidationPopup.module.css","components/ValidationPopup/ValidationPopup.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"section\":\"CaloriesCalc_section__WB2nl\",\"positionWrapper\":\"CaloriesCalc_positionWrapper__+O-50\",\"heading\":\"CaloriesCalc_heading__fAzfD\",\"formdiv\":\"CaloriesCalc_formdiv__+a6k+\",\"calcform\":\"CaloriesCalc_calcform__iDf5l\",\"tabs\":\"CaloriesCalc_tabs__MkAfR\"};","import React, { useEffect } from 'react';\nimport css from './CaloriesCalc.module.css';\nimport { useState, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Tab, Tabs } from '@mui/material';\nimport Radio from '@mui/material/Radio';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormLabel from '@mui/material/FormLabel';\nimport TextField from '@mui/material/TextField';\nimport Modal from 'components/Modal/Modal';\nimport ValidationPopup from '../ValidationPopup/ValidationPopup';\nimport {\n  validateHeightFeet,\n  validateHeightInch,\n  validateCurrentLbs,\n  validateDesiredLbs,\n  validateHeight,\n  validateAge,\n  validateCurrent,\n  validateDesired,\n  validateBlood,\n} from '../../redux/validation/calculateCalsSlice';\nimport { storeCalulator } from '../../redux/user/userSlice';\nimport CustomButton from 'components/CustomButton/CustomButton';\nimport { getDailyRate, postCalculator } from '../../redux/user/userOperations';\nimport { useAuth } from '../../hooks/useAuth';\nimport dayjs from 'dayjs';\nimport { useUser } from 'hooks/useUser';\n\nconst CaloriesCalc = () => {\n  const ageRef = useRef(null);\n  const currentRef = useRef(null);\n  const desiredRef = useRef(null);\n  const heightInRef = useRef(null);\n  const ageUSRef = useRef(null);\n  const currentLbsRef = useRef(null);\n  const desiredLbsRef = useRef(null);\n  const [buttonText, setButtonText] = useState('Submit');\n  const { calculator } = useUser();\n\n  const { loggedIn } = useAuth();\n  const today = dayjs().format('MM-DD-YYYY');\n  const dispatch = useDispatch();\n  const validHeight = useSelector(state => state.calculate.isHeightValid);\n  const validAge = useSelector(state => state.calculate.isAgeValid);\n  const validcurrent = useSelector(state => state.calculate.isCurrentValid);\n  const validDesired = useSelector(state => state.calculate.isDesiredValid);\n  const validBlood = useSelector(state => state.calculate.isBloodValid);\n  const isFormValid =\n    validHeight && validAge && validcurrent && validDesired && validBlood\n      ? true\n      : false;\n\n  useEffect(() => {\n    if (loggedIn) {\n      setButtonText('Update Calculator');\n    } else {\n      setButtonText('Start losing weight');\n    }\n  }, [loggedIn]);\n\n  const validHeightFeet = useSelector(\n    state => state.calculate.isHeightFeetValid\n  );\n  const validHeightInch = useSelector(\n    state => state.calculate.isHeightInchValid\n  );\n  const validcurrentLbs = useSelector(\n    state => state.calculate.isCurrentLbsValid\n  );\n  const validDesiredLbs = useSelector(\n    state => state.calculate.isDesiredLbsValid\n  );\n  const isStandardFormValid =\n    validHeightFeet &&\n    validHeightInch &&\n    validAge &&\n    validcurrentLbs &&\n    validDesiredLbs &&\n    validBlood\n      ? true\n      : false;\n\n  const [validationPopups, setValidationPopups] = useState({\n    weight: false,\n    age: false,\n    currentWeight: false,\n    desiredWeight: false,\n    bloodType: false,\n  });\n\n  const resetForm = () => {\n    setFormData({\n      height: '',\n      age: '',\n      currentWeight: '',\n      desiredWeight: '',\n      bloodType: '',\n      heightFeet: '',\n      heightInch: '',\n      currentWeightLbs: '',\n      desiredWeightLbs: '',\n      unitOfMeasure: 'M',\n    });\n    dispatch(validateHeight({ fieldValue: '' }));\n    dispatch(validateHeightFeet({ fieldValue: '' }));\n    dispatch(validateHeightInch({ fieldValue: '' }));\n    dispatch(validateAge({ fieldValue: '' }));\n    dispatch(validateCurrent({ fieldValue: '' }));\n    dispatch(validateCurrentLbs({ fieldValue: '' }));\n    dispatch(validateDesired({ fieldValue: '' }));\n    dispatch(validateDesiredLbs({ fieldValue: '' }));\n    dispatch(validateBlood({ fieldValue: '' }));\n  };\n  const [focusedField, setFocusedField] = useState(null);\n\n  const toggleValidationPopup = (fieldName, visible) => {\n    setValidationPopups({ ...validationPopups, [fieldName]: visible });\n  };\n\n  const [modalState, setModalState] = useState({\n    open: false,\n    dailyRate: null,\n    foodNotToEat: [],\n    source: 'calculator',\n  }); //modal state and setters\n\n  const handleOpen = passinfo => {\n    setModalState(prev => {\n      return {\n        ...prev,\n        open: true,\n        dailyRate: passinfo.dailyRate,\n        foodNotToEat: passinfo.notAllowedFood,\n      };\n    });\n  };\n  const handleModalClose = () => {\n    setModalState(prev => {\n      return {\n        ...prev,\n        open: false,\n      };\n    });\n    setTimeout(() => {\n      // fixing effect, when during closing modal you see 0 kcal recommended daily calorie intake\n      setModalState({ open: false, dailyRate: null, foodNotToEat: [] });\n    }, 250);\n  };\n\n  const [formData, setFormData] = useState({\n    height: '',\n    age: '',\n    currentWeight: '',\n    desiredWeight: '',\n    bloodType: '',\n    heightFeet: '',\n    heightInch: '',\n    currentWeightLbs: '',\n    desiredWeightLbs: '',\n    unitOfMeasure: 'M',\n  });\n\n  const [currentTabIndex, setCurrentTabIndex] = useState(0);\n\n  const handleTabChange = async (e, tabIndex) => {\n    setCurrentTabIndex(tabIndex);\n    await setFormData(formData => {\n      return {\n        ...formData,\n        unitOfMeasure: tabIndex === 0 ? 'M' : 'S',\n      };\n    });\n  };\n\n  const changeHandler = e => {\n    const { name, value } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value,\n    });\n    switch (name) {\n      case 'height':\n        dispatch(validateHeight({ fieldValue: value }));\n        break;\n      case 'heightFeet':\n        dispatch(validateHeightFeet({ fieldValue: value }));\n        break;\n      case 'heightInch':\n        dispatch(validateHeightInch({ fieldValue: value }));\n        break;\n      case 'age':\n        dispatch(validateAge({ fieldValue: value }));\n        break;\n      case 'currentWeight':\n        dispatch(validateCurrent({ fieldValue: value }));\n        break;\n      case 'currentWeightLbs':\n        dispatch(validateCurrentLbs({ fieldValue: value }));\n        break;\n      case 'desiredWeight':\n        dispatch(validateDesired({ fieldValue: value }));\n        break;\n      case 'desiredWeightLbs':\n        dispatch(validateDesiredLbs({ fieldValue: value }));\n        break;\n      case 'bloodType':\n        dispatch(validateBlood({ fieldValue: value }));\n        break;\n      default:\n        break;\n    }\n    setFocusedField(name);\n    toggleValidationPopup(name, true);\n  };\n  const validationReqs = useSelector(state => state.calculate.validationReqs);\n  const renderValidationPopup = () => {\n    return (\n      <div>\n        <ValidationPopup\n          validationData={validationReqs[focusedField]}\n          visible={focusedField}\n        />\n      </div>\n    );\n  };\n\n  const submitHandler = async e => {\n    e.preventDefault();\n    try {\n      const {\n        height,\n        age,\n        currentWeight,\n        desiredWeight,\n        bloodType,\n        heightFeet,\n        heightInch,\n        currentWeightLbs,\n        desiredWeightLbs,\n        unitOfMeasure,\n      } = formData;\n      const convertMeasurements = {\n        currentWeight:\n          unitOfMeasure === 'M' ? currentWeight : currentWeightLbs * 0.454,\n        height:\n          unitOfMeasure === 'M'\n            ? height\n            : (heightFeet * 12 + heightInch * 1) * 2.54,\n        age,\n        desiredWeight:\n          unitOfMeasure === 'M' ? desiredWeight : desiredWeightLbs * 0.454,\n        bloodType,\n      };\n      const response = await dispatch(getDailyRate(convertMeasurements));\n      const passinfo = response.payload.data;\n      const calculatorInfo = {\n        height,\n        age,\n        bloodType,\n        currentWeight,\n        desiredWeight,\n        heightFeet,\n        heightInch,\n        currentWeightLbs,\n        desiredWeightLbs,\n        dailyRate: passinfo.dailyRate,\n        unitOfMeasure,\n        date: '12-24-2023',\n        startDate: calculator.startDate || today,\n        originalWeight:\n          calculator.originalWeight || currentWeight || currentWeightLbs,\n      };\n      if (!loggedIn) {\n        dispatch(storeCalulator(calculatorInfo));\n        handleOpen(passinfo);\n      } else {\n        dispatch(postCalculator(calculatorInfo));\n      }\n      resetForm();\n    } catch (err) {\n      throw new Error('Error submitting calculator: ' + err.message);\n    }\n  };\n\n  return (\n    <>\n      <div className={css.positionWrapper}>\n        <div className={css.section}>\n          <div className={css.calcWrapper}>\n            <h1 className={css.heading}>Calculate your daily calorie</h1>\n            <h1 className={css.heading}>intake right now</h1>\n\n            <div className={css.tabs}>\n              <Tabs\n                orientation=\"horizontal\"\n                value={currentTabIndex}\n                onChange={handleTabChange}\n                indicatorColor=\"transparent\"\n                sx={{\n                  '& button': {\n                    marginTop: '25px',\n                    paddingTop: '5px',\n                    width: '100px',\n                    padding: '1rem',\n                    margin: '2px',\n                    //  height: '20px',\n                    borderRadius: '30px',\n                    fontFamily: 'Verdana',\n                    fontSize: '9px',\n                    fontWeight: 700,\n                    textTransform: 'capitalize',\n                    //  backgroundColor: '#fc842d',\n                    border: 'solid #fc842d',\n                  },\n                  '& button:focus': {\n                    //  backgroundColor: '#ffffff',\n                    border: 'solid #fc842d',\n                    boxShadow:\n                      ' 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23)',\n                  },\n                  '& button:hover': {\n                    //  backgroundColor: '#ffffff',\n                    //  color: '#fc842d',\n                    border: 'solid #fc842d',\n                    boxShadow:\n                      ' 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23)',\n                  },\n                }}\n              >\n                <Tab label=\"Metric\" />\n                <Tab label=\"Standard US\" />\n              </Tabs>\n            </div>\n\n            {/* TAB 1 Contents */}\n            {currentTabIndex === 0 && (\n              <form className={css.calcform} onSubmit={submitHandler}>\n                <div className={css.formdiv}>\n                  <TextField\n                    sx={{\n                      '& .MuiOutlinedInput-root.Mui-focused': {\n                        '& > fieldset': {\n                          borderColor: 'orange',\n                        },\n                      },\n\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    margin=\"normal\"\n                    InputLabelProps={\n                      focusedField === 'height' && !validHeight\n                        ? { style: { color: 'red' } }\n                        : { style: { color: '#9B9FAA' } }\n                    }\n                    type=\"tel\"\n                    inputProps={{\n                      onKeyPress: event => {\n                        const { key } = event;\n                        if (key === 'Enter') {\n                          ageRef.current.focus();\n                        }\n                      },\n                    }}\n                    label=\"Height *\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.height}\n                    name=\"height\"\n                    onFocus={() => setFocusedField('height')}\n                    onBlur={() => setFocusedField(null)}\n                    //  error={focusedField === 'height' && !validHeight}\n                  />\n                  {focusedField === 'height' && renderValidationPopup()}\n                  <TextField\n                    sx={{\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    margin=\"normal\"\n                    InputLabelProps={\n                      focusedField === 'age' && !validAge\n                        ? { style: { color: 'red' } }\n                        : { style: { color: '#9B9FAA' } }\n                    }\n                    type=\"tel\"\n                    inputRef={ageRef}\n                    inputProps={{\n                      onKeyPress: event => {\n                        const { key } = event;\n                        if (key === 'Enter') {\n                          currentRef.current.focus();\n                        }\n                      },\n                    }}\n                    label=\"Age *\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.age}\n                    name=\"age\"\n                    onFocus={() => setFocusedField('age')}\n                    onBlur={() => setFocusedField(null)}\n                    //  error={focusedField === 'age' && !validAge}\n                  />\n                  {focusedField === 'age' && renderValidationPopup()}\n                  <TextField\n                    sx={{\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    margin=\"normal\"\n                    InputLabelProps={\n                      focusedField === 'currentWeight' && !validcurrent\n                        ? { style: { color: 'red' } }\n                        : { style: { color: '#9B9FAA' } }\n                    }\n                    type=\"tel\"\n                    inputRef={currentRef}\n                    inputProps={{\n                      onKeyPress: event => {\n                        const { key } = event;\n                        if (key === 'Enter') {\n                          desiredRef.current.focus();\n                        }\n                      },\n                    }}\n                    label=\"Current Weight *\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.currentWeight}\n                    name=\"currentWeight\"\n                    onFocus={() => setFocusedField('currentWeight')}\n                    onBlur={() => setFocusedField(null)}\n                    //  error={focusedField === 'currentWeight' && !validcurrent}\n                  />\n                  {focusedField === 'currentWeight' && renderValidationPopup()}\n                </div>\n                <div className={css.formdiv}>\n                  <TextField\n                    sx={{\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    margin=\"normal\"\n                    InputLabelProps={\n                      focusedField === 'desiredWeight' && !validDesired\n                        ? { style: { color: 'red' } }\n                        : { style: { color: '#9B9FAA' } }\n                    }\n                    type=\"tel\"\n                    inputRef={desiredRef}\n                    label=\"Desired Weight *\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.desiredWeight}\n                    name=\"desiredWeight\"\n                    onFocus={() => setFocusedField('desiredWeight')}\n                    onBlur={() => setFocusedField(null)}\n                    //  error={focusedField === 'desiredWeight' && !validDesired}\n                  />\n                  {focusedField === 'desiredWeight' && renderValidationPopup()}\n                  <FormLabel\n                    id=\"demo-radio-buttons-group-label\"\n                    sx={{\n                      marginTop: '20px',\n                    }}\n                  >\n                    Blood Type\n                  </FormLabel>\n\n                  <RadioGroup\n                    aria-labelledby=\"demo-controlled-radio-buttons-group\"\n                    value={formData.bloodType}\n                    name=\"bloodType\"\n                    sx={{\n                      flexDirection: 'row',\n                    }}\n                    onChange={changeHandler}\n                    onFocus={() => setFocusedField('bloodType')}\n                    onBlur={() => setFocusedField(null)}\n                  >\n                    <FormControlLabel\n                      value=\"A\"\n                      control={\n                        <Radio\n                          sx={{\n                            '&.Mui-checked': {\n                              color: '#FC842D',\n                            },\n                          }}\n                        />\n                      }\n                      label=\"1\"\n                    />\n                    <FormControlLabel\n                      value=\"B\"\n                      control={\n                        <Radio\n                          sx={{\n                            '&.Mui-checked': {\n                              color: '#FC842D',\n                            },\n                          }}\n                        />\n                      }\n                      label=\"2\"\n                    />\n                    <FormControlLabel\n                      value=\"AB\"\n                      control={\n                        <Radio\n                          sx={{\n                            '&.Mui-checked': {\n                              color: '#FC842D',\n                            },\n                          }}\n                        />\n                      }\n                      label=\"3\"\n                    />\n                    <FormControlLabel\n                      value=\"O\"\n                      control={\n                        <Radio\n                          sx={{\n                            '&.Mui-checked': {\n                              color: '#FC842D',\n                            },\n                          }}\n                        />\n                      }\n                      label=\"4\"\n                    />\n                  </RadioGroup>\n                  {focusedField === 'bloodType' && renderValidationPopup()}\n                </div>\n                <CustomButton\n                  color=\"orange\"\n                  size=\"wide\"\n                  disabled={!isFormValid}\n                >\n                  {buttonText}\n                </CustomButton>\n              </form>\n            )}\n            {/*  Standard US Contents */}\n            {currentTabIndex === 1 && (\n              <form className={css.calcform} onSubmit={submitHandler}>\n                <div className={css.formdiv}>\n                  <TextField\n                    sx={{\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    margin=\"normal\"\n                    InputLabelProps={\n                      focusedField === 'heightFeet' && !validHeightFeet\n                        ? { style: { color: 'red' } }\n                        : { style: { color: '#9B9FAA' } }\n                    }\n                    inputProps={{\n                      onKeyPress: event => {\n                        const { key } = event;\n                        if (key === 'Enter') {\n                          heightInRef.current.focus();\n                        }\n                      },\n                    }}\n                    type=\"tel\"\n                    label=\"Height Feet *\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.heightFeet}\n                    name=\"heightFeet\"\n                    onFocus={() => setFocusedField('heightFeet')}\n                    onBlur={() => setFocusedField(null)}\n                    //  error={focusedField === 'heightFeet' && !validHeightFeet}\n                  />\n                  {focusedField === 'heightFeet' && renderValidationPopup()}\n                  <TextField\n                    sx={{\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    margin=\"normal\"\n                    InputLabelProps={\n                      focusedField === 'heightInch' && !validHeightInch\n                        ? { style: { color: 'red' } }\n                        : { style: { color: '#9B9FAA' } }\n                    }\n                    inputRef={heightInRef}\n                    inputProps={{\n                      onKeyPress: event => {\n                        const { key } = event;\n                        if (key === 'Enter') {\n                          ageUSRef.current.focus();\n                        }\n                      },\n                    }}\n                    type=\"tel\"\n                    label=\"Height Inch *\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.heightInch}\n                    name=\"heightInch\"\n                    onFocus={() => setFocusedField('heightInch')}\n                    onBlur={() => setFocusedField(null)}\n                    // error={focusedField === 'heightInch' && !validHeightInch}\n                  />\n                  {focusedField === 'heightInch' && renderValidationPopup()}\n                  <TextField\n                    sx={{\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    margin=\"normal\"\n                    InputLabelProps={\n                      focusedField === 'age' && !validAge\n                        ? { style: { color: 'red' } }\n                        : { style: { color: '#9B9FAA' } }\n                    }\n                    inputRef={ageUSRef}\n                    inputProps={{\n                      onKeyPress: event => {\n                        const { key } = event;\n                        if (key === 'Enter') {\n                          currentLbsRef.current.focus();\n                        }\n                      },\n                    }}\n                    type=\"tel\"\n                    label=\"Age *\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.age}\n                    name=\"age\"\n                    onFocus={() => setFocusedField('age')}\n                    onBlur={() => setFocusedField(null)}\n                    //  error={focusedField === 'age' && !validAge}\n                  />\n                  {focusedField === 'age' && renderValidationPopup()}\n                </div>\n                <div className={css.formdiv}>\n                  <TextField\n                    sx={{\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    margin=\"normal\"\n                    InputLabelProps={\n                      focusedField === 'currentWeightLbs' && !validcurrentLbs\n                        ? { style: { color: 'red' } }\n                        : { style: { color: '#9B9FAA' } }\n                    }\n                    inputRef={currentLbsRef}\n                    inputProps={{\n                      onKeyPress: event => {\n                        const { key } = event;\n                        if (key === 'Enter') {\n                          desiredLbsRef.current.focus();\n                        }\n                      },\n                    }}\n                    type=\"tel\"\n                    label=\"Current Weight Lbs *\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.currentWeightLbs}\n                    name=\"currentWeightLbs\"\n                    onFocus={() => setFocusedField('currentWeightLbs')}\n                    onBlur={() => setFocusedField(null)}\n                    //  error={focusedField === 'currentWeightLbs' && !validcurrentLbs}\n                  />\n                  {focusedField === 'currentWeightLbs' &&\n                    renderValidationPopup()}\n                  <TextField\n                    sx={{\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    margin=\"normal\"\n                    InputLabelProps={\n                      focusedField === 'desiredWeightLbs' && !validDesiredLbs\n                        ? { style: { color: 'red' } }\n                        : { style: { color: '#9B9FAA' } }\n                    }\n                    inputRef={desiredLbsRef}\n                    type=\"tel\"\n                    label=\"Desired Weight Lbs *\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.desiredWeightLbs}\n                    name=\"desiredWeightLbs\"\n                    onFocus={() => setFocusedField('desiredWeightLbs')}\n                    onBlur={() => setFocusedField(null)}\n                    //  error={focusedField === 'desiredWeightLbs' && !validDesiredLbs}\n                  />\n                  {focusedField === 'desiredWeightLbs' &&\n                    renderValidationPopup()}\n                  <FormLabel\n                    id=\"demo-radio-buttons-group-label\"\n                    sx={{\n                      marginTop: '20px',\n                    }}\n                  >\n                    Blood Type\n                  </FormLabel>\n                  <RadioGroup\n                    aria-labelledby=\"demo-controlled-radio-buttons-group\"\n                    value={formData.bloodType}\n                    name=\"bloodType\"\n                    sx={{\n                      flexDirection: 'row',\n                    }}\n                    onChange={changeHandler}\n                    onFocus={() => setFocusedField('bloodType')}\n                    onBlur={() => setFocusedField(null)}\n                  >\n                    <FormControlLabel\n                      value=\"A\"\n                      control={\n                        <Radio\n                          sx={{\n                            '&.Mui-checked': {\n                              color: '#FC842D',\n                            },\n                          }}\n                        />\n                      }\n                      label=\"A\"\n                    />\n                    <FormControlLabel\n                      value=\"B\"\n                      control={\n                        <Radio\n                          sx={{\n                            '&.Mui-checked': {\n                              color: '#FC842D',\n                            },\n                          }}\n                        />\n                      }\n                      label=\"B\"\n                    />\n                    <FormControlLabel\n                      value=\"AB\"\n                      control={\n                        <Radio\n                          sx={{\n                            '&.Mui-checked': {\n                              color: '#FC842D',\n                            },\n                          }}\n                        />\n                      }\n                      label=\"AB\"\n                    />\n                    <FormControlLabel\n                      value=\"O\"\n                      control={\n                        <Radio\n                          sx={{\n                            '&.Mui-checked': {\n                              color: '#FC842D',\n                            },\n                          }}\n                        />\n                      }\n                      label=\"O\"\n                    />\n                  </RadioGroup>\n                </div>\n                <CustomButton\n                  color=\"orange\"\n                  size=\"wide\"\n                  disabled={!isStandardFormValid}\n                >\n                  {buttonText}\n                </CustomButton>\n              </form>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <Modal handleModalClose={handleModalClose} modalState={modalState} />\n    </>\n  );\n};\n\nexport default CaloriesCalc;\n","import { node, string } from 'prop-types';\n\nconst Container = ({children, className}) => {\n    return (\n        <div className={className}>{children}</div>\n    )\n};\n\nContainer.propTopes = {\n    children: node.isRequired,\n    className: string\n};\n\nexport default Container ;","import s from './modal.module.css';\nconst ListWithScroll = props => {\n  return (\n    <ol style={props.style}>\n      {props.array.map(listItem => (\n        <li className={s.notEatItem} key={listItem._id}>\n          {listItem.title}\n        </li>\n      ))}\n    </ol>\n  );\n};\n\nexport default ListWithScroll;\n","import { Button } from '@mui/material';\nimport { Link } from 'react-router-dom';\nimport ListWithScroll from './ListWithScroll';\nimport s from './modal.module.css';\n\nconst DailyRateModal = ({ handleModalClose, modalState }) => {\n  return (\n      <>\n        <div className={s.backButtonMobbile}>\n          <span className={s.back} onClick={handleModalClose}>\n            ⏎\n          </span>\n        </div>\n        <div className={s.modalBox}>\n          <span className={s.closeButton} onClick={handleModalClose}>\n            ✕\n          </span>\n          <p className={s.modalTitle}>\n            Your recommended daily\n            <br /> calorie intake is\n          </p>\n          <b className={s.dailyRate}>\n            <span className={s.totalCaloriesNumber}>\n              {Math.round(modalState.dailyRate)}{' '}\n            </span>\n            kcal\n          </b>\n          <div className={s.notEat}>\n            <hr className={s.hr} />\n            <b className={s.text2}>Foods you should not eat</b>\n            <ListWithScroll array={modalState.foodNotToEat.slice(0)} />\n            <Link to=\"register\" className={s.buttonWrapper}>\n              <Button className={s.button} variant=\"contained\">\n                Start losing weight\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </>\n  );\n};\nexport default DailyRateModal;\n","import { Button } from '@mui/material';\nimport { Link } from 'react-router-dom';\nimport s from './modal.module.css';\n\nfunction DiaryModal() {\n  return (\n    <>\n      <div className={s.modalBox}>\n        <p className={s.modalTitle}>\n          Caloric daily rate required\n          <br /> to use diary!\n        </p>\n        <Link to=\"/calculator\" className={s.buttonWrapper}>\n          <Button className={s.button} variant=\"contained\">\n            Click Here\n          </Button>\n        </Link>\n      </div>\n    </>\n  );\n}\n\nexport default DiaryModal;\n","import {\n  Box,\n  Backdrop,\n  Fade,\n  Modal as MaterialModal,\n  useMediaQuery,\n} from '@mui/material';\n\nimport DailyRateModal from './DailyRateModal';\nimport DiaryModal from './DiaryModal';\n\nconst Modal = ({ handleModalClose, modalState }) => {\n  const isMobile = useMediaQuery('(max-width: 480px)');\n\n  return (\n    <MaterialModal\n      style={{ top: isMobile && 83 }}\n      open={modalState.open}\n      onClose={handleModalClose}\n      closeAfterTransition\n      slots={{ backdrop: Backdrop }}\n      slotProps={{\n        backdrop: {\n          timeout: 500,\n          sx: { top: isMobile && 83, backgroundColor: '#2121211f' },\n        },\n      }}\n      disableScrollLock={isMobile ? true : false}\n    >\n      <Fade in={modalState.open}>\n        <Box>\n          {modalState.source === 'calculator' ? (\n            <DailyRateModal\n              handleModalClose={handleModalClose}\n              modalState={modalState}\n            />\n          ) : (\n            <DiaryModal handleModalClose={handleModalClose} />\n          )}\n        </Box>\n      </Fade>\n    </MaterialModal>\n  );\n};\nexport default Modal;\n","// extracted by mini-css-extract-plugin\nexport default {};","import React from 'react';\nimport { Paper, List, ListItem, ListItemText } from '@mui/material';\nimport CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\nimport css from './ValidationPopup.module.css';\n\nconst ValidationPopup = ({ validationData, visible }) => {\n  return (\n    <Paper elevation={8} className={css.validationPopup}>\n      <List className={css.validationPopupList} sx={{ width: '100%', maxWidth: 360 }}>\n        {visible && validationData\n          ? validationData.map((item, index) => {\n              const reqKey = Object.keys(item)[0];\n              const { id, message, met } = item[reqKey];\n              const IconComponent = met ? CheckCircleOutlineIcon : ErrorOutlineIcon;\n              const iconColor = met ? 'green' : 'red';\n              return (\n                <ListItem className={css.validationPopupItem} key={id} disableGutters>\n                  <IconComponent className={css.validationPopupIcon} style={{ color: iconColor }} />\n                  <ListItemText disableTypography primary={message} sx={{ fontSize: '12px' }} />\n                </ListItem>\n              );\n            })\n          : null}\n      </List>\n    </Paper>\n  );\n};\n\nexport default ValidationPopup;"],"names":["ageRef","useRef","currentRef","desiredRef","heightInRef","ageUSRef","currentLbsRef","desiredLbsRef","useState","buttonText","setButtonText","calculator","useUser","loggedIn","useAuth","today","dayjs","format","dispatch","useDispatch","validHeight","useSelector","state","calculate","isHeightValid","validAge","isAgeValid","validcurrent","isCurrentValid","validDesired","isDesiredValid","validBlood","isBloodValid","isFormValid","useEffect","validHeightFeet","isHeightFeetValid","validHeightInch","isHeightInchValid","validcurrentLbs","isCurrentLbsValid","validDesiredLbs","isDesiredLbsValid","isStandardFormValid","weight","age","currentWeight","desiredWeight","bloodType","validationPopups","setValidationPopups","focusedField","setFocusedField","open","dailyRate","foodNotToEat","source","modalState","setModalState","handleOpen","passinfo","prev","notAllowedFood","height","heightFeet","heightInch","currentWeightLbs","desiredWeightLbs","unitOfMeasure","formData","setFormData","currentTabIndex","setCurrentTabIndex","handleTabChange","e","tabIndex","changeHandler","fieldName","visible","target","name","value","validateHeight","fieldValue","validateHeightFeet","validateHeightInch","validateAge","validateCurrent","validateCurrentLbs","validateDesired","validateDesiredLbs","validateBlood","validationReqs","renderValidationPopup","ValidationPopup","validationData","submitHandler","preventDefault","convertMeasurements","getDailyRate","response","payload","data","calculatorInfo","date","startDate","originalWeight","postCalculator","storeCalulator","Error","message","className","css","Tabs","orientation","onChange","indicatorColor","sx","marginTop","paddingTop","width","padding","margin","borderRadius","fontFamily","fontSize","fontWeight","textTransform","border","boxShadow","Tab","label","onSubmit","TextField","borderColor","lineHeight","letterSpacing","textAlign","paddingRight","InputLabelProps","style","color","type","inputProps","onKeyPress","event","key","current","focus","variant","onFocus","onBlur","inputRef","FormLabel","id","RadioGroup","flexDirection","FormControlLabel","control","Radio","CustomButton","size","disabled","Modal","handleModalClose","setTimeout","Container","children","propTopes","node","string","props","array","map","listItem","s","title","_id","onClick","Math","round","ListWithScroll","slice","to","Button","isMobile","useMediaQuery","top","onClose","closeAfterTransition","slots","backdrop","Backdrop","slotProps","timeout","backgroundColor","disableScrollLock","Fade","in","Box","Paper","elevation","List","maxWidth","item","index","Object","keys","met","IconComponent","CheckCircleOutlineIcon","ErrorOutlineIcon","iconColor","ListItem","disableGutters","ListItemText","disableTypography","primary"],"sourceRoot":""}