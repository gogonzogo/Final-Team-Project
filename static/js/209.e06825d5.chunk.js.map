{"version":3,"file":"static/js/209.e06825d5.chunk.js","mappings":"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","sources":["components/Container/Container.jsx","webpack://final-team-project/./src/components/LoginForm/login.module.css?916a","components/LoginForm/LoginForm.jsx","pages/Login/Login.jsx","redux/validation/registrationSelectors.js"],"sourcesContent":["import { node, string } from 'prop-types';\n\nconst Container = ({children, className}) => {\n    return (\n        <div className={className}>{children}</div>\n    )\n};\n\nContainer.propTopes = {\n    children: node.isRequired,\n    className: string\n};\n\nexport default Container ;","// extracted by mini-css-extract-plugin\nexport default {\"form_container\":\"login_form_container__K4jsj\",\"form_title\":\"login_form_title__Wyom9\",\"form_grid\":\"login_form_grid__1MIvp\",\"login_button\":\"login_login_button__DZPBF\",\"register_button\":\"login_register_button__HHbVE\",\"error_message\":\"login_error_message__WE-l0\",\"error_message_valid\":\"login_error_message_valid__NbF4o\",\"button_container\":\"login_button_container__Evbbt\",\"email_input\":\"login_email_input__bl6Jx\"};","import React from 'react';\nimport { useState, useRef } from 'react';\nimport style from '../LoginForm/login.module.css';\nimport { Box, FormControl, TextField, Button, Grid } from '@mui/material';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { login } from 'redux/auth/authOperations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectIsEmailValid,\n  selectIsPasswordValid,\n} from '../../redux/validation/registrationSelectors';\nimport {\n  validateEmail,\n  validatePassword,\n} from '../../redux/validation/registrationSlice';\nimport { toast } from 'react-toastify';\n\nconst LoginForm = () => {\n  const passwordRef = useRef(null);\n  const ButtondRef = useRef(null);\n  const isEmailValid = useSelector(selectIsEmailValid);\n  const isPasswordValid = useSelector(selectIsPasswordValid);\n  // const isFormValid = useSelector(selectFormIsValid);\n  const dispatch = useDispatch();\n  const nav = useNavigate(); // react router hook\n  // const validationReqs = useSelector((state) => state.registration.validationReqs); // gets validation requirements from the slice\n\n  // form data state\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n  });\n  // used to set the focused text field\n  const [focusedField, setFocusedField] = useState('');\n\n  // listens to input change\n  const handleChange = e => {\n    const { name, value } = e.target;\n    // console.log('name', name);\n    setFormData({ ...formData, [name]: value });\n    // check if email is valid\n\n    switch (\n      name // dispatches validation reducers from the slice on change\n    ) {\n      case 'email':\n        dispatch(validateEmail({ fieldValue: value }));\n        break;\n      case 'password':\n        dispatch(validatePassword({ fieldValue: value }));\n        break;\n      default:\n        break;\n    }\n  };\n\n  // listens to form submission and looks for errors\n  const [loginError, setLoginError] = useState(null);\n\n  // handles login\n  async function handleLogin() {\n    try {\n      const response = await dispatch(login(formData));\n      if (response.payload.code === 200) {\n        nav('/diary');\n      }\n      // nav('/');\n    } catch (err) {\n      console.err('Login error', loginError);\n      setLoginError('An error occured. Please try again.');\n      toast.error('An error occured. Please try again.');\n    }\n  }\n\n  // handles form submission\n  function handleSubmit(e) {\n    e.preventDefault();\n    handleLogin(); // calls the login function\n    // clear the form data after submission\n    setFormData({ email: '', password: '' });\n  }\n\n  return (\n    <Box className={style.form_container}>\n      <h2 className={style.form_title}>LOG IN</h2>\n      <Grid className={style.form_grid}>\n        {/* login form */}\n\n        <FormControl variant=\"standard\">\n          <form onSubmit={handleSubmit}>\n            {' '}\n            {/*pass validatioon schema */}\n            <TextField\n              className={style.email_input}\n              InputLabelProps={focusedField === 'email' && !isEmailValid ? {style: {color: \"red\"}} : { style: { color: \"#9B9FAA\" } }} \n              inputProps={{\n                onKeyPress: event => {\n                  const { key } = event;\n                  console.log(key);\n                  if (key === \"Enter\") {\n                    passwordRef.current.focus();\n                  }\n                }\n              }}\n              variant=\"standard\"\n              label=\"Email\"\n              type=\"email\"\n              name=\"email\"\n              fullWidth\n              margin=\"normal\"\n              required\n              error={focusedField === 'email' && !isEmailValid}\n              // styles the input field and checks whether email is not valid and when it is valid\n              helperText={\n                !formData.email ? (\n                  'Required'\n                ) : isEmailValid && formData.email.length > 3 ? (\n                  <span className={style.error_message_valid}>Checks out!</span>\n                ) : (\n                  <span className={style.error_message}>Not quite!</span>\n                )\n              }\n              value={formData.email}\n              onChange={handleChange}\n              onFocus={() => setFocusedField('email')}\n            />\n            <TextField\n              className={style.password_input}\n              InputLabelProps={focusedField === 'password' && !isPasswordValid ? {style: {color: \"red\"}} : { style: { color: \"#9B9FAA\" } }} \n              inputRef={passwordRef}\n              inputProps={{\n                onKeyPress: event => {\n                  const { key } = event;\n                  console.log(key);\n                  if (key === \"Enter\") {\n                    ButtondRef.current.focus();\n                  }\n                }\n              }}\n              variant=\"standard\"\n              label=\"Password\"\n              type=\"password\"\n              name=\"password\"\n              fullWidth\n              margin=\"normal\"\n              required\n              error={focusedField === 'password' && !isPasswordValid}\n              // styles the input field and checks whether password is not valid and when it is valid\n              helperText={\n                !formData.password ? (\n                  'Required'\n                ) : isPasswordValid ? (\n                  <span className={style.error_message_valid}>Checks out!</span>\n                ) : (\n                  <span className={style.error_message}>Not quite!</span>\n                )\n              }\n              value={formData.password}\n              onChange={handleChange}\n              onFocus={() => setFocusedField('password')}\n            />\n            {/* if password is not longer than 5 number and email is not longer than 5 chars then disable button  */}\n            {/* {isEmailValid && isPasswordValid ? (\n              <Box className={style.button_container}>\n                <Button variant=\"contained\" className={style.login_button}>\n                  Log In\n                </Button>\n                <Link to=\"/Register\">\n                  <Button variant=\"contained\" className={style.register_button}>\n                    Register\n                  </Button>\n                </Link>\n              </Box>\n            ) : ( */}\n            <Box className={style.button_container}>\n              <Button\n              inputRef={ButtondRef}\n                variant=\"contained\"\n                type=\"submit\"\n                disabled={!isEmailValid || !isPasswordValid}\n                className={style.login_button}\n              >\n                Log In\n              </Button>\n              <Link to=\"/Register\">\n                <Button variant=\"contained\" className={style.register_button}>\n                  Register\n                </Button>\n              </Link>\n            </Box>\n          </form>\n        </FormControl>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default LoginForm;\n","import React from 'react'\nimport LoginForm from '../../components/LoginForm/LoginForm'\nimport Container from 'components/Container/Container'\n\nfunction Login() {\n  return (\n    // imported my form here to see it get rendered \n   <div className=\"background mainBackground\">\n   <section className=\"top-bottom\">\n   <Container className=\"left-right\">\n        <LoginForm />\n   </Container>\n   </section>\n   </div>\n  )\n}\n\nexport default Login\n","import { createSelector } from 'reselect';\n\n// Select the registration slice from the Redux store\nconst selectRegistration = (state) => state.registration;\n\n// Select individual validation requirements\nexport const selectNameValidationReqs = createSelector(\n  [selectRegistration],\n  (registration) => registration.validationReqs.name\n);\n\nexport const selectEmailValidationReqs = createSelector(\n  [selectRegistration],\n  (registration) => registration.validationReqs.email\n);\n\nexport const selectPasswordValidationReqs = createSelector(\n  [selectRegistration],\n  (registration) => registration.validationReqs.password\n);\n\n// Select individual field validation states - this works then?\nexport const selectIsNameValid = createSelector(\n  [selectRegistration],\n  (registration) => registration.isNameValid \n);\n\nexport const selectIsEmailValid = createSelector(\n  [selectRegistration],\n  (registration) => registration.isEmailValid \n);\n\nexport const selectIsPasswordValid = createSelector(\n  [selectRegistration],\n  (registration) => registration.isPasswordValid \n);\n\n// Select the overall form validity\nexport const selectFormIsValid = createSelector(\n  [selectIsNameValid, selectIsEmailValid, selectIsPasswordValid],\n  (isNameValid, isEmailValid, isPasswordValid) =>\n    isNameValid && isEmailValid && isPasswordValid\n);"],"names":["Container","children","className","propTopes","node","string","passwordRef","useRef","ButtondRef","isEmailValid","useSelector","selectIsEmailValid","isPasswordValid","selectIsPasswordValid","dispatch","useDispatch","nav","useNavigate","useState","email","password","formData","setFormData","focusedField","setFocusedField","handleChange","e","target","name","value","validateEmail","fieldValue","validatePassword","loginError","setLoginError","login","payload","code","console","err","toast","Box","style","Grid","FormControl","variant","onSubmit","preventDefault","handleLogin","TextField","InputLabelProps","color","inputProps","onKeyPress","event","key","log","current","focus","label","type","fullWidth","margin","required","error","helperText","length","onChange","onFocus","inputRef","Button","disabled","to","selectRegistration","state","registration","selectIsNameValid","createSelector","validationReqs","isNameValid","selectFormIsValid"],"sourceRoot":""}