{"version":3,"file":"static/js/743.b2fecba8.chunk.js","mappings":"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","sources":["webpack://final-team-project/./src/components/Button/Button.module.css?ce6f","components/Button/Button.jsx","webpack://final-team-project/./src/components/CaloriesCalc/CaloriesCalc.module.css?baa3","webpack://final-team-project/./src/components/Modal/modal.module.css?1a55","components/Modal/Modal.jsx","components/CaloriesCalc/CaloriesCalc.jsx","components/Container/Container.jsx","components/ValidationPopup/ValidationPopup.module.css","components/ValidationPopup/ValidationPopup.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"Button\":\"Button_Button__Smq3v\",\"orange\":\"Button_orange__RdjQy\",\"white\":\"Button_white__QBg8M\",\"disabled\":\"Button_disabled__PUkNe\",\"wide\":\"Button_wide__-p+Pf\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport css from './Button.module.css';\nimport { Button as MuiButton} from '@mui/material'\nimport clsx from 'clsx';\n\nconst CustomButton = ({ color, size, children, disabled }) => {\nreturn (\n\n    <MuiButton className={clsx(css.Button, css[color], css[size], { [css.disabled]: disabled })}\n        type=\"submit\"\n        disabled={disabled}\n    >\n        {children}\n    </MuiButton>\n   \n  );\n};\n\nCustomButton.propTypes = {\n  color: PropTypes.string.isRequired, // Ensure that color prop is required\n  size: PropTypes.string,\n    children: PropTypes.node.isRequired,\n  disabled: PropTypes.bool,  // Allow any content as children\n};\n\nexport default CustomButton;\n","// extracted by mini-css-extract-plugin\nexport default {\"section\":\"CaloriesCalc_section__WB2nl\",\"heading\":\"CaloriesCalc_heading__fAzfD\",\"formdiv\":\"CaloriesCalc_formdiv__+a6k+\",\"calcform\":\"CaloriesCalc_calcform__iDf5l\",\"positionWrapper\":\"CaloriesCalc_positionWrapper__+O-50\"};","// extracted by mini-css-extract-plugin\nexport default {\"modalBox\":\"modal_modalBox__UnNX8\",\"closeButton\":\"modal_closeButton__hYa4+\",\"backButtonMobbile\":\"modal_backButtonMobbile__r5QHQ\",\"back\":\"modal_back__V8JNM\",\"modalTitle\":\"modal_modalTitle__3zeL5\",\"totalCaloriesNumber\":\"modal_totalCaloriesNumber__bUxLg\",\"totalCalories\":\"modal_totalCalories__U80Ut\",\"notEat\":\"modal_notEat__P-szP\",\"hr\":\"modal_hr__CzLPQ\",\"text2\":\"modal_text2__9c6ek\",\"notEatItem\":\"modal_notEatItem__hXM4C\",\"buttonWrapper\":\"modal_buttonWrapper__NZCpm\",\"button\":\"modal_button__GRC0s\"};","import {\n  Backdrop,\n  Box,\n  Button,\n  Fade,\n  Modal as MaterialModal,\n} from '@mui/material';\nimport { Link } from 'react-router-dom';\nimport s from './modal.module.css';\n\nconst Modal = props => {\n  const { handleClose, modalState } = props;\n  return (\n    <MaterialModal\n      open={modalState.open}\n      onClose={handleClose}\n      closeAfterTransition\n      slots={{ backdrop: Backdrop }}\n      slotProps={{\n        backdrop: {\n          timeout: 500,\n          sx: { backgroundColor: '#2121211f' },\n        },\n      }}\n    >\n      <Fade in={modalState.open}>\n        <Box>\n          <div className={s.backButtonMobbile}>\n            <span className={s.back} onClick={handleClose}>\n              ⏎\n            </span>\n          </div>\n          <div className={s.modalBox}>\n            <span className={s.closeButton} onClick={handleClose}>\n              ✕\n            </span>\n            <p className={s.modalTitle}>\n              Your recommended daily\n              <br /> calorie intake is\n            </p>\n            <b className={s.totalCalories}>\n              <span className={s.totalCaloriesNumber}>\n                {Math.round(modalState.totalCalories)}{' '}\n              </span>\n              kcal\n            </b>\n            <div className={s.notEat}>\n              <hr className={s.hr} />\n              <b className={s.text2}>Foods you should not eat</b>\n              <ol>\n                {modalState.foodNotToEat.map(listItem => (\n                  <li className={s.notEatItem} key={listItem}>\n                    {listItem}\n                  </li>\n                ))}\n              </ol>\n              <Link to=\"Login\" className={s.buttonWrapper}>\n                <Button className={s.button} variant=\"contained\">\n                  Start losing weight\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </Box>\n      </Fade>\n    </MaterialModal>\n  );\n};\nexport default Modal;\n","import React from 'react';\nimport css from './CaloriesCalc.module.css';\nimport { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Tab, Tabs } from '@mui/material';\nimport Radio from '@mui/material/Radio';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\n// import FormControl from '@mui/material/FormControl';\nimport FormLabel from '@mui/material/FormLabel';\nimport TextField from '@mui/material/TextField';\nimport Modal from 'components/Modal/Modal';\nimport ValidationPopup from '../ValidationPopup/ValidationPopup';\nimport {\n  validateHeight,\n  validateAge,\n  validateCurrent,\n  validateDesired,\n  validateBlood,\n} from '../../redux/validation/calculateCalsSlice';\nimport {\n  validateHeightFeet,\n  validateHeightInch,\n  validateCurrentLbs,\n  validateDesiredLbs,\n} from '../../redux/validation/calculateCalsSlice';\nimport { storeCalulator } from '../../redux/Calc/calcSlice';\nimport CustomButton from 'components/Button/Button';\n\nconst CaloriesCalc = () => {\n  const dispatch = useDispatch();\n  const validHeight = useSelector(state => state.calculate.isHeightValid);\n  const validAge = useSelector(state => state.calculate.isAgeValid);\n  const validcurrent = useSelector(state => state.calculate.isCurrentValid);\n  const validDesired = useSelector(state => state.calculate.isDesiredValid);\n  const validBlood = useSelector(state => state.calculate.isBloodValid);\n  const isFormValid =\n    validHeight && validAge && validcurrent && validDesired && validBlood\n      ? true\n      : false;\n\n  const validHeightFeet = useSelector(\n    state => state.calculate.isHeightFeetValid\n  );\n  const validHeightInch = useSelector(\n    state => state.calculate.isHeightInchValid\n  );\n  const validcurrentLbs = useSelector(\n    state => state.calculate.isCurrentLbsValid\n  );\n  const validDesiredLbs = useSelector(\n    state => state.calculate.isDesiredLbsValid\n  );\n  const isStandardFormValid =\n    validHeightFeet &&\n    validHeightInch &&\n    validAge &&\n    validcurrentLbs &&\n    validDesiredLbs &&\n    validBlood\n      ? true\n      : false;\n\n  const returnedCal = useSelector(state => state.calCalories.value);\n\n  const [validationPopups, setValidationPopups] = useState({\n    weight: false,\n    age: false,\n    currentWeight: false,\n    desiredWeight: false,\n    bloodType: false,\n  });\n\n  const [currentTabIndex, setCurrentTabIndex] = useState(0);\n\n  const handleTabChange = (e, tabIndex) => {\n    setCurrentTabIndex(tabIndex);\n  };\n  const [focusedField, setFocusedField] = useState(null);\n\n  const toggleValidationPopup = (fieldName, visible) => {\n    setValidationPopups({ ...validationPopups, [fieldName]: visible });\n  };\n\n  const validationReqs = useSelector(state => state.calculate.validationReqs);\n\n  const [modalState, setModalState] = useState({\n    open: false,\n    totalCalories: null,\n    foodNotToEat: [],\n  }); //modal state and setters\n\n  const handleOpen = totalCalories => {\n    setModalState({\n      open: true,\n      totalCalories: totalCalories,\n      foodNotToEat: ['give', 'me', 'food'], //  change me\n    });\n  };\n  const handleClose = () => {\n    setModalState(prev => {\n      return {\n        ...prev,\n        open: false,\n      };\n    });\n    setTimeout(() => {\n      // fixing effect, when during closing modal you see 0 kcal recommended daily calorie intake\n      setModalState({ open: false, totalCalories: null, foodNotToEat: [] });\n    }, 250);\n  };\n\n  const [formData, setFormData] = useState({\n    height: returnedCal.height,\n    age: returnedCal.age,\n    currentWeight: returnedCal.currentWeight,\n    desiredWeight: returnedCal.desiredWeight,\n    bloodType: returnedCal.bloodType,\n    heightFeet: returnedCal.heightFeet,\n    heightInch: returnedCal.heightInch,\n    currentWeightLbs: returnedCal.currentWeightLbs,\n    desiredWeightLbs: returnedCal.desiredWeightLbs,\n  });\n\n  const changeHandler = e => {\n    const { name, value } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value,\n    });\n    switch (name) {\n      case 'height':\n        dispatch(validateHeight({ fieldValue: value }));\n        break;\n      case 'heightFeet':\n        dispatch(validateHeightFeet({ fieldValue: value }));\n        break;\n      case 'heightInch':\n        dispatch(validateHeightInch({ fieldValue: value }));\n        break;\n      case 'age':\n        dispatch(validateAge({ fieldValue: value }));\n        break;\n      case 'currentWeight':\n        dispatch(validateCurrent({ fieldValue: value }));\n        break;\n      case 'currentWeightLbs':\n        dispatch(validateCurrentLbs({ fieldValue: value }));\n        break;\n      case 'desiredWeight':\n        dispatch(validateDesired({ fieldValue: value }));\n        break;\n      case 'desiredWeightLbs':\n        dispatch(validateDesiredLbs({ fieldValue: value }));\n        break;\n      case 'bloodType':\n        dispatch(validateBlood({ fieldValue: value }));\n        break;\n      default:\n        break;\n    }\n    if (currentTabIndex === 1) {\n      const { heightFeet, heightInch, currentWeightLbs, desiredWeightLbs } =\n        formData;\n      setFormData(formData => {\n        return {\n          ...formData,\n          height: (heightFeet * 12 + heightInch * 1) * 2.54,\n          currentWeight: currentWeightLbs * 0.454,\n          desiredWeight: desiredWeightLbs * 0.454,\n        };\n      });\n    }\n    setFocusedField(name);\n    toggleValidationPopup(name, true);\n  };\n\n  const renderValidationPopup = () => {\n    return (\n      <ValidationPopup\n        validationData={validationReqs[focusedField]}\n        visible={focusedField}\n      />\n    );\n  };\n\n  const submitHandler = async e => {\n    e.preventDefault();\n    if (currentTabIndex === 1) {\n      const { heightFeet, heightInch, currentWeightLbs, desiredWeightLbs } =\n        formData;\n      await setFormData(formData => {\n        return {\n          ...formData,\n          height: (heightFeet * 12 + heightInch * 1) * 2.54,\n          currentWeight: currentWeightLbs * 0.454,\n          desiredWeight: desiredWeightLbs * 0.454,\n        };\n      });\n    }\n\n    const { height, age, currentWeight, desiredWeight, bloodType } = formData;\n    const totalCalories =\n      10 * currentWeight +\n      6.25 * height -\n      5 * age -\n      161 -\n      10 * (currentWeight - desiredWeight);\n\n    dispatch(\n      storeCalulator({\n        height: height,\n        age: age,\n        currentWeight: currentWeight,\n        desiredWeight: desiredWeight,\n        bloodType: bloodType,\n      })\n    );\n\n    handleOpen(totalCalories); // give me food\n  };\n\n  return (\n    <>\n      <div className={css.positionWrapper}>\n        <div className={css.section}>\n          <div className={css.calcWrapper}>\n            <h1 className={css.heading}>Calculate your daily calorie</h1>\n            <h1 className={css.heading}>intake right now</h1>\n\n            <Tabs\n              value={currentTabIndex}\n              onChange={handleTabChange}\n              sx={{\n                '& button': {\n                  color: 'white',\n                  borderRadius: 2,\n                  backgroundColor: '#FC842D',\n                  marginTop: '15px',\n                  marginRight: '10px',\n                },\n                '& button:focus': {\n                  color: 'white',\n                  textShadow: '2px 2px',\n                  fontWeight: 900,\n                },\n              }}\n            >\n              <Tab label=\"Metric\" />\n              <Tab label=\"Standard US\" />\n            </Tabs>\n\n            {/* TAB 1 Contents */}\n            {currentTabIndex === 0 && (\n              <form className={css.calcform} onSubmit={submitHandler}>\n                <div className={css.formdiv}>\n                  <TextField\n                    sx={{\n                      '& .MuiOutlinedInput-root.Mui-focused': {\n                        '& > fieldset': {\n                          borderColor: 'orange',\n                        },\n                      },\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    InputLabelProps={{ style: { color: '#9B9FAA' } }}\n                    type=\"tel\"\n                    inputprops={{ inputprops: { min: 122, max: 214 } }}\n                    label=\"Height *\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.height}\n                    name=\"height\"\n                    onFocus={() => setFocusedField('height')}\n                    onBlur={() => setFocusedField(null)}\n                  />\n                  {focusedField === 'height' && (\n                    <ValidationPopup\n                      validationData={validationReqs[focusedField]}\n                      visible={focusedField}\n                    />\n                  )}\n                  <TextField\n                    sx={{\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    InputLabelProps={{ style: { color: '#9B9FAA' } }}\n                    type=\"tel\"\n                    inputprops={{ inputprops: { min: 18, max: 80 } }}\n                    label=\"Age\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.age}\n                    name=\"age\"\n                    onFocus={() => setFocusedField('age')}\n                    onBlur={() => setFocusedField(null)}\n                  />\n                  {focusedField === 'age' && (\n                    <ValidationPopup\n                      validationData={validationReqs[focusedField]}\n                      visible={focusedField}\n                    />\n                  )}\n                  <TextField\n                    sx={{\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    InputLabelProps={{ style: { color: '#9B9FAA' } }}\n                    type=\"tel\"\n                    inputprops={{ inputprops: { min: 34, max: 181 } }}\n                    label=\"Current Weight\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.currentWeight}\n                    name=\"currentWeight\"\n                    onFocus={() => setFocusedField('currentWeight')}\n                    onBlur={() => setFocusedField(null)}\n                  />\n                  {focusedField === 'currentWeight' && (\n                    <ValidationPopup\n                      validationData={validationReqs[focusedField]}\n                      visible={focusedField}\n                    />\n                  )}\n                </div>\n                <div className={css.formdiv}>\n                  <TextField\n                    sx={{\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    InputLabelProps={{ style: { color: '#9B9FAA' } }}\n                    type=\"tel\"\n                    inputprops={{ inputprops: { min: 34, max: 181 } }}\n                    label=\"Desired Weight\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.desiredWeight}\n                    name=\"desiredWeight\"\n                    onFocus={() => setFocusedField('desiredWeight')}\n                    onBlur={() => setFocusedField(null)}\n                  />\n                  {focusedField === 'desiredWeight' && (\n                    <ValidationPopup\n                      validationData={validationReqs[focusedField]}\n                      visible={focusedField}\n                    />\n                  )}\n                  <FormLabel id=\"demo-radio-buttons-group-label\">\n                    Blood Type\n                  </FormLabel>\n\n                  <RadioGroup\n                    aria-labelledby=\"demo-controlled-radio-buttons-group\"\n                    value={formData.bloodType}\n                    name=\"bloodType\"\n                    sx={{\n                      flexDirection: 'row',\n                    }}\n                    onChange={changeHandler}\n                    onFocus={() => setFocusedField('bloodType')}\n                    onBlur={() => setFocusedField(null)}\n                  >\n                    <FormControlLabel\n                      value=\"A\"\n                      control={\n                        <Radio\n                          sx={{\n                            '&.Mui-checked': {\n                              color: '#FC842D',\n                            },\n                          }}\n                        />\n                      }\n                      label=\"1\"\n                    />\n                    <FormControlLabel\n                      value=\"B\"\n                      control={\n                        <Radio\n                          sx={{\n                            '&.Mui-checked': {\n                              color: '#FC842D',\n                            },\n                          }}\n                        />\n                      }\n                      label=\"2\"\n                    />\n                    <FormControlLabel\n                      value=\"AB\"\n                      control={\n                        <Radio\n                          sx={{\n                            '&.Mui-checked': {\n                              color: '#FC842D',\n                            },\n                          }}\n                        />\n                      }\n                      label=\"3\"\n                    />\n                    <FormControlLabel\n                      value=\"O\"\n                      control={\n                        <Radio\n                          sx={{\n                            '&.Mui-checked': {\n                              color: '#FC842D',\n                            },\n                          }}\n                        />\n                      }\n                      label=\"4\"\n                    />\n                  </RadioGroup>\n                  {focusedField === 'bloodType' && (\n                    <ValidationPopup\n                      validationData={validationReqs[focusedField]}\n                      visible={focusedField}\n                    />\n                  )}\n                </div>\n                <CustomButton\n                  color=\"orange\"\n                  size=\"wide\"\n                  disabled={!isFormValid}\n                >\n                  Start losing weight\n                </CustomButton>\n              </form>\n            )}\n            {/*  Standard US Contents */}\n            {currentTabIndex === 1 && (\n              <form className={css.calcform} onSubmit={submitHandler}>\n                <div className={css.formdiv}>\n                  <TextField\n                    sx={{\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    InputLabelProps={{ style: { color: '#9B9FAA' } }}\n                    type=\"tel\"\n                    label=\"Height Feet *\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.heightFeet}\n                    name=\"heightFeet\"\n                    onFocus={() => setFocusedField('heightFeet')}\n                    onBlur={() => setFocusedField(null)}\n                  />\n                  <TextField\n                    sx={{\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    InputLabelProps={{ style: { color: '#9B9FAA' } }}\n                    type=\"tel\"\n                    label=\"Height Inch *\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.heightInch}\n                    name=\"heightInch\"\n                    onFocus={() => setFocusedField('heightInch')}\n                    onBlur={() => setFocusedField(null)}\n                  />\n\n                  <TextField\n                    sx={{\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    InputLabelProps={{ style: { color: '#9B9FAA' } }}\n                    type=\"tel\"\n                    inputprops={{ inputprops: { min: 18, max: 80 } }}\n                    label=\"Age\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.age}\n                    name=\"age\"\n                    onFocus={() => setFocusedField('age')}\n                    onBlur={() => setFocusedField(null)}\n                  />\n                </div>\n                <div className={css.formdiv}>\n                  <TextField\n                    sx={{\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    InputLabelProps={{ style: { color: '#9B9FAA' } }}\n                    type=\"tel\"\n                    inputprops={{ inputprops: { min: 34, max: 181 } }}\n                    label=\"Current Weight Lbs\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.currentWeightLbs}\n                    name=\"currentWeightLbs\"\n                    onFocus={() => setFocusedField('currentWeightLbs')}\n                    onBlur={() => setFocusedField(null)}\n                  />\n                  <TextField\n                    sx={{\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    InputLabelProps={{ style: { color: '#9B9FAA' } }}\n                    type=\"tel\"\n                    inputprops={{ inputprops: { min: 34, max: 181 } }}\n                    label=\"Desired Weight Lbs\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.desiredWeightLbs}\n                    name=\"desiredWeightLbs\"\n                    onFocus={() => setFocusedField('desiredWeightLbs')}\n                    onBlur={() => setFocusedField(null)}\n                  />\n                  <FormLabel id=\"demo-radio-buttons-group-label\">\n                    Blood Type\n                  </FormLabel>\n\n                  <RadioGroup\n                    aria-labelledby=\"demo-controlled-radio-buttons-group\"\n                    value={formData.bloodType}\n                    name=\"bloodType\"\n                    sx={{\n                      flexDirection: 'row',\n                    }}\n                    onChange={changeHandler}\n                    onFocus={() => setFocusedField('bloodType')}\n                    onBlur={() => setFocusedField(null)}\n                  >\n                    <FormControlLabel\n                      value=\"A\"\n                      control={\n                        <Radio\n                          sx={{\n                            '&.Mui-checked': {\n                              color: '#FC842D',\n                            },\n                          }}\n                        />\n                      }\n                      label=\"A\"\n                    />\n                    <FormControlLabel\n                      value=\"B\"\n                      control={\n                        <Radio\n                          sx={{\n                            '&.Mui-checked': {\n                              color: '#FC842D',\n                            },\n                          }}\n                        />\n                      }\n                      label=\"B\"\n                    />\n                    <FormControlLabel\n                      value=\"AB\"\n                      control={\n                        <Radio\n                          sx={{\n                            '&.Mui-checked': {\n                              color: '#FC842D',\n                            },\n                          }}\n                        />\n                      }\n                      label=\"AB\"\n                    />\n                    <FormControlLabel\n                      value=\"O\"\n                      control={\n                        <Radio\n                          sx={{\n                            '&.Mui-checked': {\n                              color: '#FC842D',\n                            },\n                          }}\n                        />\n                      }\n                      label=\"O\"\n                    />\n                  </RadioGroup>\n                </div>\n\n                {renderValidationPopup()}\n                <CustomButton\n                  color=\"orange\"\n                  size=\"wide\"\n                  disabled={!isStandardFormValid}\n                >\n                  Start losing weight\n                </CustomButton>\n              </form>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <Modal handleClose={handleClose} modalState={modalState} />\n    </>\n  );\n};\n\nexport default CaloriesCalc;\n","import { node, string } from 'prop-types';\n\nconst Container = ({children, className}) => {\n    return (\n        <div className={className}>{children}</div>\n    )\n};\n\nContainer.propTopes = {\n    children: node.isRequired,\n    className: string\n};\n\nexport default Container ;","// extracted by mini-css-extract-plugin\nexport default {};","import React from 'react';\nimport { Paper, List, ListItem, ListItemText } from '@mui/material';\nimport CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\nimport css from './ValidationPopup.module.css';\n\nconst ValidationPopup = ({ validationData, visible }) => {\n  return (\n    <Paper elevation={8} className={css.validationPopup}>\n      <List className={css.validationPopupList} sx={{ width: '100%', maxWidth: 360 }}>\n        {visible && validationData\n          ? validationData.map((item, index) => {\n              const reqKey = Object.keys(item)[0];\n              const { id, message, met } = item[reqKey];\n              const IconComponent = met ? CheckCircleOutlineIcon : ErrorOutlineIcon;\n              const iconColor = met ? 'green' : 'red';\n              return (\n                <ListItem className={css.validationPopupItem} key={id} disableGutters>\n                  <IconComponent className={css.validationPopupIcon} style={{ color: iconColor }} />\n                  <ListItemText disableTypography primary={message} sx={{ fontSize: '12px' }} />\n                </ListItem>\n              );\n            })\n          : null}\n      </List>\n    </Paper>\n  );\n};\n\nexport default ValidationPopup;"],"names":["color","size","children","disabled","className","clsx","css","type","props","handleClose","modalState","open","onClose","closeAfterTransition","slots","backdrop","Backdrop","slotProps","timeout","sx","backgroundColor","Fade","in","Box","s","onClick","Math","round","totalCalories","foodNotToEat","map","listItem","to","Button","variant","dispatch","useDispatch","validHeight","useSelector","state","calculate","isHeightValid","validAge","isAgeValid","validcurrent","isCurrentValid","validDesired","isDesiredValid","validBlood","isBloodValid","isFormValid","validHeightFeet","isHeightFeetValid","validHeightInch","isHeightInchValid","validcurrentLbs","isCurrentLbsValid","validDesiredLbs","isDesiredLbsValid","isStandardFormValid","returnedCal","calCalories","value","useState","weight","age","currentWeight","desiredWeight","bloodType","validationPopups","setValidationPopups","currentTabIndex","setCurrentTabIndex","focusedField","setFocusedField","validationReqs","setModalState","handleOpen","height","heightFeet","heightInch","currentWeightLbs","desiredWeightLbs","formData","setFormData","changeHandler","e","fieldName","visible","target","name","validateHeight","fieldValue","validateHeightFeet","validateHeightInch","validateAge","validateCurrent","validateCurrentLbs","validateDesired","validateDesiredLbs","validateBlood","submitHandler","preventDefault","storeCalulator","Tabs","onChange","tabIndex","borderRadius","marginTop","marginRight","textShadow","fontWeight","Tab","label","onSubmit","TextField","borderColor","fontFamily","fontSize","lineHeight","letterSpacing","textAlign","width","paddingRight","InputLabelProps","style","inputprops","min","max","onFocus","onBlur","ValidationPopup","validationData","FormLabel","id","RadioGroup","flexDirection","FormControlLabel","control","Radio","prev","setTimeout","Container","propTopes","node","string","Paper","elevation","List","maxWidth","item","index","Object","keys","message","met","IconComponent","CheckCircleOutlineIcon","ErrorOutlineIcon","iconColor","ListItem","disableGutters","ListItemText","disableTypography","primary"],"sourceRoot":""}