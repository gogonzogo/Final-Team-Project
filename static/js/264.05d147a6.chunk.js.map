{"version":3,"file":"static/js/264.05d147a6.chunk.js","mappings":"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","sources":["webpack://final-team-project/./src/components/CaloriesCalc/CaloriesCalc.module.css?baa3","components/Modal/Modal.jsx","components/CaloriesCalc/CaloriesCalc.jsx","components/Container/Container.jsx","components/Modal/ListWithScroll.jsx","components/ValidationPopup/ValidationPopup.module.css","components/ValidationPopup/ValidationPopup.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"section\":\"CaloriesCalc_section__WB2nl\",\"positionWrapper\":\"CaloriesCalc_positionWrapper__+O-50\",\"heading\":\"CaloriesCalc_heading__fAzfD\",\"formdiv\":\"CaloriesCalc_formdiv__+a6k+\",\"calcform\":\"CaloriesCalc_calcform__iDf5l\",\"tabs\":\"CaloriesCalc_tabs__MkAfR\"};","import {\n  Backdrop,\n  Box,\n  Button,\n  Fade,\n  Modal as MaterialModal,\n  useMediaQuery,\n} from '@mui/material';\nimport { Link } from 'react-router-dom';\nimport ListWithScroll from './ListWithScroll';\nimport s from './modal.module.css';\n\nconst Modal = props => {\n  const { handleClose, modalState } = props;\n  const isMobile = useMediaQuery('(max-width: 480px)');\n\n  return (\n    <MaterialModal\n      style={{ top: isMobile && 83 }}\n      open={modalState.open}\n      onClose={handleClose}\n      closeAfterTransition\n      slots={{ backdrop: Backdrop }}\n      slotProps={{\n        backdrop: {\n          timeout: 500,\n          sx: { top: isMobile && 83, backgroundColor: '#2121211f' },\n        },\n      }}\n      disableScrollLock={isMobile ? true : false}\n    >\n      <Fade in={modalState.open}>\n        <Box>\n          <div className={s.backButtonMobbile}>\n            <span className={s.back} onClick={handleClose}>\n              ⏎\n            </span>\n          </div>\n          <div className={s.modalBox}>\n            <span className={s.closeButton} onClick={handleClose}>\n              ✕\n            </span>\n            <p className={s.modalTitle}>\n              Your recommended daily\n              <br /> calorie intake is\n            </p>\n            <b className={s.dailyRate}>\n              <span className={s.totalCaloriesNumber}>\n                {Math.round(modalState.dailyRate)}{' '}\n              </span>\n              kcal\n            </b>\n            <div className={s.notEat}>\n              <hr className={s.hr} />\n              <b className={s.text2}>Foods you should not eat</b>\n              <ListWithScroll array={modalState.foodNotToEat.slice(0)} />\n              <Link to=\"register\" className={s.buttonWrapper}>\n                <Button className={s.button} variant=\"contained\">\n                  Start losing weight\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </Box>\n      </Fade>\n    </MaterialModal>\n  );\n};\nexport default Modal;\n","import React, { useEffect } from 'react';\nimport css from './CaloriesCalc.module.css';\nimport { useState, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Tab, Tabs } from '@mui/material';\nimport Radio from '@mui/material/Radio';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormLabel from '@mui/material/FormLabel';\nimport TextField from '@mui/material/TextField';\nimport Modal from 'components/Modal/Modal';\nimport ValidationPopup from '../ValidationPopup/ValidationPopup';\nimport {\n  validateHeightFeet,\n  validateHeightInch,\n  validateCurrentLbs,\n  validateDesiredLbs,\n  validateHeight,\n  validateAge,\n  validateCurrent,\n  validateDesired,\n  validateBlood,\n} from '../../redux/validation/calculateCalsSlice';\nimport { storeCalulator } from '../../redux/user/userSlice';\n// resetCalcState;\nimport CustomButton from 'components/CustomButton/CustomButton';\nimport {\n  CalNoEat,\n  postCalculator,\n} from '../../redux/user/userOperations';\nimport { useAuth } from '../../hooks/useAuth';\nimport dayjs from 'dayjs';\n// import { logOut } from '../../redux/auth/authOperations';\n\nconst CaloriesCalc = () => {\n  const ageRef = useRef(null);\n  const currentRef = useRef(null);\n  const desiredRef = useRef(null);\n  const heightInRef = useRef(null);\n  const ageUSRef = useRef(null);\n  const currentLbsRef = useRef(null);\n  const desiredLbsRef = useRef(null);\n  const [buttonText, setButtonText] = useState('Submit');\n\n  const { loggedIn } = useAuth();\n  const today = dayjs().format('MM-DD-YYYY');\n  const dispatch = useDispatch();\n  const validHeight = useSelector(state => state.calculate.isHeightValid);\n  const validAge = useSelector(state => state.calculate.isAgeValid);\n  const validcurrent = useSelector(state => state.calculate.isCurrentValid);\n  const validDesired = useSelector(state => state.calculate.isDesiredValid);\n  const validBlood = useSelector(state => state.calculate.isBloodValid);\n  const isFormValid =\n    validHeight && validAge && validcurrent && validDesired && validBlood\n      ? true\n      : false;\n\n  useEffect(() => {\n    if (loggedIn) {\n      setButtonText('Update Calculator');\n    } else {\n      setButtonText('Start losing weight');\n    }\n  }, [loggedIn]);\n\n  const validHeightFeet = useSelector(\n    state => state.calculate.isHeightFeetValid\n  );\n  const validHeightInch = useSelector(\n    state => state.calculate.isHeightInchValid\n  );\n  const validcurrentLbs = useSelector(\n    state => state.calculate.isCurrentLbsValid\n  );\n  const validDesiredLbs = useSelector(\n    state => state.calculate.isDesiredLbsValid\n  );\n  const isStandardFormValid =\n    validHeightFeet &&\n    validHeightInch &&\n    validAge &&\n    validcurrentLbs &&\n    validDesiredLbs &&\n    validBlood\n      ? true\n      : false;\n\n  // const calculatorState = useSelector(state => state.user.calculator);\n\n  const [validationPopups, setValidationPopups] = useState({\n    weight: false,\n    age: false,\n    currentWeight: false,\n    desiredWeight: false,\n    bloodType: false,\n  });\n\n  const resetForm = () => {\n    setFormData({\n      height: '',\n      age: '',\n      currentWeight: '',\n      desiredWeight: '',\n      bloodType: '',\n      heightFeet: '',\n      heightInch: '',\n      currentWeightLbs: '',\n      desiredWeightLbs: '',\n      unitOfMeasure: 'M',\n    });\n    dispatch(validateHeight({ fieldValue: '' }));\n    dispatch(validateHeightFeet({ fieldValue: '' }));\n    dispatch(validateHeightInch({ fieldValue: '' }));\n    dispatch(validateAge({ fieldValue: '' }));\n    dispatch(validateCurrent({ fieldValue: '' }));\n    dispatch(validateCurrentLbs({ fieldValue: '' }));\n    dispatch(validateDesired({ fieldValue: '' }));\n    dispatch(validateDesiredLbs({ fieldValue: '' }));\n    dispatch(validateBlood({ fieldValue: '' }));\n  };\n  const [focusedField, setFocusedField] = useState(null);\n\n  const toggleValidationPopup = (fieldName, visible) => {\n    setValidationPopups({ ...validationPopups, [fieldName]: visible });\n  };\n\n  const [modalState, setModalState] = useState({\n    open: false,\n    dailyRate: null,\n    foodNotToEat: [],\n  }); //modal state and setters\n\n  const handleOpen = passinfo => {\n    setModalState({\n      open: true,\n      dailyRate: passinfo.dailyRate,\n      foodNotToEat: passinfo.notAllowedFood,\n    });\n  };\n  const handleClose = () => {\n    setModalState(prev => {\n      return {\n        ...prev,\n        open: false,\n      };\n    });\n    setTimeout(() => {\n      // fixing effect, when during closing modal you see 0 kcal recommended daily calorie intake\n      setModalState({ open: false, dailyRate: null, foodNotToEat: [] });\n    }, 250);\n  };\n\n  const [formData, setFormData] = useState({\n    height: '',\n    age: '',\n    currentWeight: '',\n    desiredWeight: '',\n    bloodType: '',\n    heightFeet: '',\n    heightInch: '',\n    currentWeightLbs: '',\n    desiredWeightLbs: '',\n    unitOfMeasure: 'M',\n  });\n\n  const [currentTabIndex, setCurrentTabIndex] = useState(0);\n\n  const handleTabChange = async (e, tabIndex) => {\n    setCurrentTabIndex(tabIndex);\n    await setFormData(formData => {\n      return {\n        ...formData,\n        unitOfMeasure: tabIndex === 0 ? 'M' : 'S',\n      };\n    });\n  };\n\n  const changeHandler = e => {\n    const { name, value } = e.target;\n    // console.log('name', name)\n    // console.log('value', value);\n    setFormData({\n      ...formData,\n      [name]: value,\n    });\n    switch (name) {\n      case 'height':\n        dispatch(validateHeight({ fieldValue: value }));\n        break;\n      case 'heightFeet':\n        dispatch(validateHeightFeet({ fieldValue: value }));\n        break;\n      case 'heightInch':\n        dispatch(validateHeightInch({ fieldValue: value }));\n        break;\n      case 'age':\n        dispatch(validateAge({ fieldValue: value }));\n        break;\n      case 'currentWeight':\n        dispatch(validateCurrent({ fieldValue: value }));\n        break;\n      case 'currentWeightLbs':\n        dispatch(validateCurrentLbs({ fieldValue: value }));\n        break;\n      case 'desiredWeight':\n        dispatch(validateDesired({ fieldValue: value }));\n        break;\n      case 'desiredWeightLbs':\n        dispatch(validateDesiredLbs({ fieldValue: value }));\n        break;\n      case 'bloodType':\n        dispatch(validateBlood({ fieldValue: value }));\n        break;\n      default:\n        break;\n    }\n    // if (currentTabIndex === 1) {\n    //   const { heightFeet, heightInch, currentWeightLbs, desiredWeightLbs } =\n    //     formData;\n    //   setFormData(formData => {\n    //     return {\n    //       ...formData,\n    //       height: (heightFeet * 12 + heightInch * 1) * 2.54,\n    //       currentWeight: currentWeightLbs * 0.454,\n    //       desiredWeight: desiredWeightLbs * 0.454,\n    //     };\n    //   });\n    // }\n    setFocusedField(name);\n    toggleValidationPopup(name, true);\n  };\n  const validationReqs = useSelector(state => state.calculate.validationReqs);\n  const renderValidationPopup = () => {\n    return (\n      <div>\n        <ValidationPopup\n          validationData={validationReqs[focusedField]}\n          visible={focusedField}\n        />\n      </div>\n    );\n  };\n\n  const submitHandler = async e => {\n    e.preventDefault();\n    // if (currentTabIndex === 1) {\n    //   const { heightFeet, heightInch, currentWeightLbs, desiredWeightLbs } =\n    //     formData;\n    //   await setFormData(formData => {\n    //     return {\n    //       ...formData,\n    //       height: (heightFeet * 12 + heightInch * 1) * 2.54,\n    //       currentWeight: currentWeightLbs * 0.454,\n    //       desiredWeight: desiredWeightLbs * 0.454,\n    //     };\n    //   });\n    // }\n\n    const {\n      height,\n      age,\n      currentWeight,\n      desiredWeight,\n      bloodType,\n      heightFeet,\n      heightInch,\n      currentWeightLbs,\n      desiredWeightLbs,\n      unitOfMeasure,\n    } = formData;\n    if (!loggedIn) {\n      dispatch(\n        storeCalulator({\n          height: height,\n          age: age,\n          currentWeight: currentWeight,\n          desiredWeight: desiredWeight,\n          bloodType: bloodType,\n          heightFeet: heightFeet,\n          heightInch: heightInch,\n          currentWeightLbs: currentWeightLbs,\n          desiredWeightLbs: desiredWeightLbs,\n          unitOfMeasure,\n        })\n      );\n    }\n    const entedInfo = {\n      currentWeight:\n        unitOfMeasure === 'M' ? currentWeight : currentWeightLbs * 0.454,\n      height:\n        unitOfMeasure === 'M'\n          ? height\n          : (heightFeet * 12 + heightInch * 1) * 2.54,\n      age,\n      desiredWeight:\n        unitOfMeasure === 'M' ? desiredWeight : desiredWeightLbs * 0.454,\n      bloodType,\n    };\n    try {\n      const response = await dispatch(CalNoEat(entedInfo));\n      const passinfo = response.payload.data;\n\n      if (loggedIn) {\n        let convertBlood = 0;\n        switch (bloodType) {\n          case 'A':\n            convertBlood = 1;\n            break;\n          case 'B':\n            convertBlood = 2;\n            break;\n          case 'AB':\n            convertBlood = 3;\n            break;\n          case 'O':\n            convertBlood = 4;\n            break;\n          default:\n            convertBlood = 1;\n            break;\n        }\n        const CalculatorInfo = {\n          height,\n          age,\n          bloodType: convertBlood,\n          currentWeight,\n          desiredWeight,\n          heightFeet,\n          heightInch,\n          currentWeightLbs,\n          desiredWeightLbs,\n          dailyRate: passinfo.dailyRate,\n          unitOfMeasure,\n          date: today,\n        };\n        await dispatch(postCalculator(CalculatorInfo));\n      }\n      if (!loggedIn) {\n        handleOpen(passinfo);\n      }\n      resetForm();\n    } catch (error) {\n      console.error('returned Error', error.message);\n    }\n  };\n\n  return (\n    <>\n      <div className={css.positionWrapper}>\n        <div className={css.section}>\n          <div className={css.calcWrapper}>\n            <h1 className={css.heading}>Calculate your daily calorie</h1>\n            <h1 className={css.heading}>intake right now</h1>\n\n            <div className={css.tabs}>\n              <Tabs\n                orientation=\"horizontal\"\n                value={currentTabIndex}\n                onChange={handleTabChange}\n                indicatorColor=\"transparent\"\n                sx={{\n                  '& button': {\n                    marginTop: '25px',\n                    paddingTop: '5px',\n                    width: '100px',\n                    padding: '1rem',\n                    margin: '2px',\n                    //  height: '20px',\n                    borderRadius: '30px',\n                    fontFamily: 'Verdana',\n                    fontSize: '9px',\n                    fontWeight: 700,\n                    textTransform: 'capitalize',\n                    //  backgroundColor: '#fc842d',\n                    border: 'solid #fc842d',\n                  },\n                  '& button:focus': {\n                    //  backgroundColor: '#ffffff',\n                    border: 'solid #fc842d',\n                    boxShadow:\n                      ' 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23)',\n                  },\n                  '& button:hover': {\n                    //  backgroundColor: '#ffffff',\n                    //  color: '#fc842d',\n                    border: 'solid #fc842d',\n                    boxShadow:\n                      ' 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23)',\n                  },\n                }}\n              >\n                <Tab label=\"Metric\" />\n                <Tab label=\"Standard US\" />\n              </Tabs>\n            </div>\n\n            {/* TAB 1 Contents */}\n            {currentTabIndex === 0 && (\n              <form className={css.calcform} onSubmit={submitHandler}>\n                <div className={css.formdiv}>\n                  <TextField\n                    sx={{\n                      '& .MuiOutlinedInput-root.Mui-focused': {\n                        '& > fieldset': {\n                          borderColor: 'orange',\n                        },\n                      },\n\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    margin=\"normal\"\n                    InputLabelProps={\n                      focusedField === 'height' && !validHeight\n                        ? { style: { color: 'red' } }\n                        : { style: { color: '#9B9FAA' } }\n                    }\n                    type=\"tel\"\n                    inputProps={{\n                      onKeyPress: event => {\n                        const { key } = event;\n                        if (key === 'Enter') {\n                          ageRef.current.focus();\n                        }\n                      },\n                    }}\n                    label=\"Height *\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.height}\n                    name=\"height\"\n                    onFocus={() => setFocusedField('height')}\n                    onBlur={() => setFocusedField(null)}\n                    //  error={focusedField === 'height' && !validHeight}\n                  />\n                  {focusedField === 'height' && renderValidationPopup()}\n                  <TextField\n                    sx={{\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    margin=\"normal\"\n                    InputLabelProps={\n                      focusedField === 'age' && !validAge\n                        ? { style: { color: 'red' } }\n                        : { style: { color: '#9B9FAA' } }\n                    }\n                    type=\"tel\"\n                    inputRef={ageRef}\n                    inputProps={{\n                      onKeyPress: event => {\n                        const { key } = event;\n                        if (key === 'Enter') {\n                          currentRef.current.focus();\n                        }\n                      },\n                    }}\n                    label=\"Age *\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.age}\n                    name=\"age\"\n                    onFocus={() => setFocusedField('age')}\n                    onBlur={() => setFocusedField(null)}\n                    //  error={focusedField === 'age' && !validAge}\n                  />\n                  {focusedField === 'age' && renderValidationPopup()}\n                  <TextField\n                    sx={{\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    margin=\"normal\"\n                    InputLabelProps={\n                      focusedField === 'currentWeight' && !validcurrent\n                        ? { style: { color: 'red' } }\n                        : { style: { color: '#9B9FAA' } }\n                    }\n                    type=\"tel\"\n                    inputRef={currentRef}\n                    inputProps={{\n                      onKeyPress: event => {\n                        const { key } = event;\n                        if (key === 'Enter') {\n                          desiredRef.current.focus();\n                        }\n                      },\n                    }}\n                    label=\"Current Weight *\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.currentWeight}\n                    name=\"currentWeight\"\n                    onFocus={() => setFocusedField('currentWeight')}\n                    onBlur={() => setFocusedField(null)}\n                    //  error={focusedField === 'currentWeight' && !validcurrent}\n                  />\n                  {focusedField === 'currentWeight' && renderValidationPopup()}\n                </div>\n                <div className={css.formdiv}>\n                  <TextField\n                    sx={{\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    margin=\"normal\"\n                    InputLabelProps={\n                      focusedField === 'desiredWeight' && !validDesired\n                        ? { style: { color: 'red' } }\n                        : { style: { color: '#9B9FAA' } }\n                    }\n                    type=\"tel\"\n                    inputRef={desiredRef}\n                    label=\"Desired Weight *\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.desiredWeight}\n                    name=\"desiredWeight\"\n                    onFocus={() => setFocusedField('desiredWeight')}\n                    onBlur={() => setFocusedField(null)}\n                    //  error={focusedField === 'desiredWeight' && !validDesired}\n                  />\n                  {focusedField === 'desiredWeight' && renderValidationPopup()}\n                  <FormLabel\n                    id=\"demo-radio-buttons-group-label\"\n                    sx={{\n                      marginTop: '20px',\n                    }}\n                  >\n                    Blood Type\n                  </FormLabel>\n\n                  <RadioGroup\n                    aria-labelledby=\"demo-controlled-radio-buttons-group\"\n                    value={formData.bloodType}\n                    name=\"bloodType\"\n                    sx={{\n                      flexDirection: 'row',\n                    }}\n                    onChange={changeHandler}\n                    onFocus={() => setFocusedField('bloodType')}\n                    onBlur={() => setFocusedField(null)}\n                  >\n                    <FormControlLabel\n                      value=\"A\"\n                      control={\n                        <Radio\n                          sx={{\n                            '&.Mui-checked': {\n                              color: '#FC842D',\n                            },\n                          }}\n                        />\n                      }\n                      label=\"1\"\n                    />\n                    <FormControlLabel\n                      value=\"B\"\n                      control={\n                        <Radio\n                          sx={{\n                            '&.Mui-checked': {\n                              color: '#FC842D',\n                            },\n                          }}\n                        />\n                      }\n                      label=\"2\"\n                    />\n                    <FormControlLabel\n                      value=\"AB\"\n                      control={\n                        <Radio\n                          sx={{\n                            '&.Mui-checked': {\n                              color: '#FC842D',\n                            },\n                          }}\n                        />\n                      }\n                      label=\"3\"\n                    />\n                    <FormControlLabel\n                      value=\"O\"\n                      control={\n                        <Radio\n                          sx={{\n                            '&.Mui-checked': {\n                              color: '#FC842D',\n                            },\n                          }}\n                        />\n                      }\n                      label=\"4\"\n                    />\n                  </RadioGroup>\n                  {focusedField === 'bloodType' && renderValidationPopup()}\n                </div>\n                <CustomButton\n                  color=\"orange\"\n                  size=\"wide\"\n                  disabled={!isFormValid}\n                >\n                  {buttonText}\n                </CustomButton>\n              </form>\n            )}\n            {/*  Standard US Contents */}\n            {currentTabIndex === 1 && (\n              <form className={css.calcform} onSubmit={submitHandler}>\n                <div className={css.formdiv}>\n                  <TextField\n                    sx={{\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    margin=\"normal\"\n                    InputLabelProps={\n                      focusedField === 'heightFeet' && !validHeightFeet\n                        ? { style: { color: 'red' } }\n                        : { style: { color: '#9B9FAA' } }\n                    }\n                    inputProps={{\n                      onKeyPress: event => {\n                        const { key } = event;\n                        if (key === 'Enter') {\n                          heightInRef.current.focus();\n                        }\n                      },\n                    }}\n                    type=\"tel\"\n                    label=\"Height Feet *\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.heightFeet}\n                    name=\"heightFeet\"\n                    onFocus={() => setFocusedField('heightFeet')}\n                    onBlur={() => setFocusedField(null)}\n                    //  error={focusedField === 'heightFeet' && !validHeightFeet}\n                  />\n                  {focusedField === 'heightFeet' && renderValidationPopup()}\n                  <TextField\n                    sx={{\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    margin=\"normal\"\n                    InputLabelProps={\n                      focusedField === 'heightInch' && !validHeightInch\n                        ? { style: { color: 'red' } }\n                        : { style: { color: '#9B9FAA' } }\n                    }\n                    inputRef={heightInRef}\n                    inputProps={{\n                      onKeyPress: event => {\n                        const { key } = event;\n                        if (key === 'Enter') {\n                          ageUSRef.current.focus();\n                        }\n                      },\n                    }}\n                    type=\"tel\"\n                    label=\"Height Inch *\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.heightInch}\n                    name=\"heightInch\"\n                    onFocus={() => setFocusedField('heightInch')}\n                    onBlur={() => setFocusedField(null)}\n                    // error={focusedField === 'heightInch' && !validHeightInch}\n                  />\n                  {focusedField === 'heightInch' && renderValidationPopup()}\n                  <TextField\n                    sx={{\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    margin=\"normal\"\n                    InputLabelProps={\n                      focusedField === 'age' && !validAge\n                        ? { style: { color: 'red' } }\n                        : { style: { color: '#9B9FAA' } }\n                    }\n                    inputRef={ageUSRef}\n                    inputProps={{\n                      onKeyPress: event => {\n                        const { key } = event;\n                        if (key === 'Enter') {\n                          currentLbsRef.current.focus();\n                        }\n                      },\n                    }}\n                    type=\"tel\"\n                    label=\"Age *\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.age}\n                    name=\"age\"\n                    onFocus={() => setFocusedField('age')}\n                    onBlur={() => setFocusedField(null)}\n                    //  error={focusedField === 'age' && !validAge}\n                  />\n                  {focusedField === 'age' && renderValidationPopup()}\n                </div>\n                <div className={css.formdiv}>\n                  <TextField\n                    sx={{\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    margin=\"normal\"\n                    InputLabelProps={\n                      focusedField === 'currentWeightLbs' && !validcurrentLbs\n                        ? { style: { color: 'red' } }\n                        : { style: { color: '#9B9FAA' } }\n                    }\n                    inputRef={currentLbsRef}\n                    inputProps={{\n                      onKeyPress: event => {\n                        const { key } = event;\n                        if (key === 'Enter') {\n                          desiredLbsRef.current.focus();\n                        }\n                      },\n                    }}\n                    type=\"tel\"\n                    label=\"Current Weight Lbs *\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.currentWeightLbs}\n                    name=\"currentWeightLbs\"\n                    onFocus={() => setFocusedField('currentWeightLbs')}\n                    onBlur={() => setFocusedField(null)}\n                    //  error={focusedField === 'currentWeightLbs' && !validcurrentLbs}\n                  />\n                  {focusedField === 'currentWeightLbs' &&\n                    renderValidationPopup()}\n                  <TextField\n                    sx={{\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    margin=\"normal\"\n                    InputLabelProps={\n                      focusedField === 'desiredWeightLbs' && !validDesiredLbs\n                        ? { style: { color: 'red' } }\n                        : { style: { color: '#9B9FAA' } }\n                    }\n                    inputRef={desiredLbsRef}\n                    type=\"tel\"\n                    label=\"Desired Weight Lbs *\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.desiredWeightLbs}\n                    name=\"desiredWeightLbs\"\n                    onFocus={() => setFocusedField('desiredWeightLbs')}\n                    onBlur={() => setFocusedField(null)}\n                    //  error={focusedField === 'desiredWeightLbs' && !validDesiredLbs}\n                  />\n                  {focusedField === 'desiredWeightLbs' &&\n                    renderValidationPopup()}\n                  <FormLabel\n                    id=\"demo-radio-buttons-group-label\"\n                    sx={{\n                      marginTop: '20px',\n                    }}\n                  >\n                    Blood Type\n                  </FormLabel>\n                  <RadioGroup\n                    aria-labelledby=\"demo-controlled-radio-buttons-group\"\n                    value={formData.bloodType}\n                    name=\"bloodType\"\n                    sx={{\n                      flexDirection: 'row',\n                    }}\n                    onChange={changeHandler}\n                    onFocus={() => setFocusedField('bloodType')}\n                    onBlur={() => setFocusedField(null)}\n                  >\n                    <FormControlLabel\n                      value=\"A\"\n                      control={\n                        <Radio\n                          sx={{\n                            '&.Mui-checked': {\n                              color: '#FC842D',\n                            },\n                          }}\n                        />\n                      }\n                      label=\"A\"\n                    />\n                    <FormControlLabel\n                      value=\"B\"\n                      control={\n                        <Radio\n                          sx={{\n                            '&.Mui-checked': {\n                              color: '#FC842D',\n                            },\n                          }}\n                        />\n                      }\n                      label=\"B\"\n                    />\n                    <FormControlLabel\n                      value=\"AB\"\n                      control={\n                        <Radio\n                          sx={{\n                            '&.Mui-checked': {\n                              color: '#FC842D',\n                            },\n                          }}\n                        />\n                      }\n                      label=\"AB\"\n                    />\n                    <FormControlLabel\n                      value=\"O\"\n                      control={\n                        <Radio\n                          sx={{\n                            '&.Mui-checked': {\n                              color: '#FC842D',\n                            },\n                          }}\n                        />\n                      }\n                      label=\"O\"\n                    />\n                  </RadioGroup>\n                </div>\n                <CustomButton\n                  color=\"orange\"\n                  size=\"wide\"\n                  disabled={!isStandardFormValid}\n                >\n                  {buttonText}\n                </CustomButton>\n              </form>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <Modal handleClose={handleClose} modalState={modalState} />\n    </>\n  );\n};\n\nexport default CaloriesCalc;\n","import { node, string } from 'prop-types';\n\nconst Container = ({children, className}) => {\n    return (\n        <div className={className}>{children}</div>\n    )\n};\n\nContainer.propTopes = {\n    children: node.isRequired,\n    className: string\n};\n\nexport default Container ;","import s from './modal.module.css';\nconst ListWithScroll = props => {\n  return (\n    <ol style={props.style}>\n      {props.array.map(listItem => (\n        <li className={s.notEatItem} key={listItem._id}>\n          {listItem.title}\n        </li>\n      ))}\n    </ol>\n  );\n};\n\nexport default ListWithScroll;\n","// extracted by mini-css-extract-plugin\nexport default {};","import React from 'react';\nimport { Paper, List, ListItem, ListItemText } from '@mui/material';\nimport CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\nimport css from './ValidationPopup.module.css';\n\nconst ValidationPopup = ({ validationData, visible }) => {\n  return (\n    <Paper elevation={8} className={css.validationPopup}>\n      <List className={css.validationPopupList} sx={{ width: '100%', maxWidth: 360 }}>\n        {visible && validationData\n          ? validationData.map((item, index) => {\n              const reqKey = Object.keys(item)[0];\n              const { id, message, met } = item[reqKey];\n              const IconComponent = met ? CheckCircleOutlineIcon : ErrorOutlineIcon;\n              const iconColor = met ? 'green' : 'red';\n              return (\n                <ListItem className={css.validationPopupItem} key={id} disableGutters>\n                  <IconComponent className={css.validationPopupIcon} style={{ color: iconColor }} />\n                  <ListItemText disableTypography primary={message} sx={{ fontSize: '12px' }} />\n                </ListItem>\n              );\n            })\n          : null}\n      </List>\n    </Paper>\n  );\n};\n\nexport default ValidationPopup;"],"names":["props","handleClose","modalState","isMobile","useMediaQuery","style","top","open","onClose","closeAfterTransition","slots","backdrop","Backdrop","slotProps","timeout","sx","backgroundColor","disableScrollLock","Fade","in","Box","className","s","onClick","Math","round","dailyRate","ListWithScroll","array","foodNotToEat","slice","to","Button","variant","ageRef","useRef","currentRef","desiredRef","heightInRef","ageUSRef","currentLbsRef","desiredLbsRef","useState","buttonText","setButtonText","loggedIn","useAuth","today","dayjs","format","dispatch","useDispatch","validHeight","useSelector","state","calculate","isHeightValid","validAge","isAgeValid","validcurrent","isCurrentValid","validDesired","isDesiredValid","validBlood","isBloodValid","isFormValid","useEffect","validHeightFeet","isHeightFeetValid","validHeightInch","isHeightInchValid","validcurrentLbs","isCurrentLbsValid","validDesiredLbs","isDesiredLbsValid","isStandardFormValid","weight","age","currentWeight","desiredWeight","bloodType","validationPopups","setValidationPopups","focusedField","setFocusedField","setModalState","handleOpen","passinfo","notAllowedFood","height","heightFeet","heightInch","currentWeightLbs","desiredWeightLbs","unitOfMeasure","formData","setFormData","currentTabIndex","setCurrentTabIndex","handleTabChange","e","tabIndex","changeHandler","fieldName","visible","target","name","value","validateHeight","fieldValue","validateHeightFeet","validateHeightInch","validateAge","validateCurrent","validateCurrentLbs","validateDesired","validateDesiredLbs","validateBlood","validationReqs","renderValidationPopup","ValidationPopup","validationData","submitHandler","preventDefault","storeCalulator","entedInfo","CalNoEat","response","payload","data","convertBlood","CalculatorInfo","date","postCalculator","console","error","message","css","Tabs","orientation","onChange","indicatorColor","marginTop","paddingTop","width","padding","margin","borderRadius","fontFamily","fontSize","fontWeight","textTransform","border","boxShadow","Tab","label","onSubmit","TextField","borderColor","lineHeight","letterSpacing","textAlign","paddingRight","InputLabelProps","color","type","inputProps","onKeyPress","event","key","current","focus","onFocus","onBlur","inputRef","FormLabel","id","RadioGroup","flexDirection","FormControlLabel","control","Radio","CustomButton","size","disabled","prev","setTimeout","Container","children","propTopes","node","string","map","listItem","title","_id","Paper","elevation","List","maxWidth","item","index","Object","keys","met","IconComponent","CheckCircleOutlineIcon","ErrorOutlineIcon","iconColor","ListItem","disableGutters","ListItemText","disableTypography","primary"],"sourceRoot":""}