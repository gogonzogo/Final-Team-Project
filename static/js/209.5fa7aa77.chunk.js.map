{"version":3,"file":"static/js/209.5fa7aa77.chunk.js","mappings":"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","sources":["webpack://final-team-project/./src/components/LoginForm/login.module.css?916a","components/LoginForm/LoginForm.jsx","pages/Login/Login.jsx","redux/validation/registrationSelectors.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form_title\":\"login_form_title__Wyom9\",\"form_grid\":\"login_form_grid__1MIvp\",\"login_button\":\"login_login_button__DZPBF\",\"register_button\":\"login_register_button__HHbVE\",\"error_message\":\"login_error_message__WE-l0\",\"error_message_valid\":\"login_error_message_valid__NbF4o\",\"form_container\":\"login_form_container__K4jsj\",\"button_container\":\"login_button_container__Evbbt\",\"email_input\":\"login_email_input__bl6Jx\"};","import React from 'react';\nimport { useState } from 'react';\nimport style from '../LoginForm/login.module.css';\nimport { Box, FormControl, TextField, Button, Grid } from '@mui/material';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { login } from 'redux/auth/authOperations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectIsEmailValid, selectIsPasswordValid } from '../../redux/validation/registrationSelectors';\nimport {\n  validateEmail,\n  validatePassword,\n\n} from '../../redux/validation/registrationSlice';\nimport { toast } from 'react-toastify';\n\n\n\n\nconst LoginForm = () => {\n  const isEmailValid = useSelector(selectIsEmailValid);\n  const isPasswordValid = useSelector(selectIsPasswordValid);\n // const isFormValid = useSelector(selectFormIsValid);\n  const dispatch = useDispatch();\n  const nav = useNavigate(); // react router hook\n // const validationReqs = useSelector((state) => state.registration.validationReqs); // gets validation requirements from the slice\n\n  // listens to validation changes\n  const toggleValidationPopup = (fieldName, visible) => {\n    setValidationPopups({ ...validationPopups, [fieldName]: visible });\n  };\n\n\n  const [validationPopups, setValidationPopups] = useState({\n    name: false,\n    email: false,\n    password: false,\n  });\n\n  // form data state\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n  });\n\n  const [focusedField, setFocusedField] = useState('');\n \n\n  \n  // listens to input change\n  const handleChange = e => {\n    const { name, value } = e.target;\n    // console.log('name', name);\n    setFormData({ ...formData, [name]: value });\n    // check if email is valid\n    \n    switch (name) { // dispatches validation reducers from the slice on change\n      case 'email':\n       dispatch(validateEmail({ fieldValue: value }));\n        break;\n      case 'password':\n        dispatch(validatePassword({ fieldValue: value }));\n        break;\n      default:\n        break;\n    }\n    toggleValidationPopup(name, true);\n  };\n\n  // listens to form submission and looks for errors\n  const [loginError, setLoginError] = useState(null);\n\n  // handles login\n  async function handleLogin() {\n \n\n    try {\n      // console.log('login information', userData);\n      const response = await dispatch(login(formData));\n      toast.success('Login successful!' , {\n        icon: \"ðŸš€\"\n      });\n      console.log('Login successful');\n      console.log('Login information', response.payload)\n      nav('/');\n    } catch (err) {\n      console.err('Login error', loginError);\n      setLoginError('An error occured. Please try again.');\n      toast.error('An error occured. Please try again.');\n    }\n  }\n\n  // handles form submission\n  function handleSubmit(e) {\n    e.preventDefault();\n    handleLogin();\n    // clear the form data after submission\n    setFormData({ email: '', password: '' });\n  }\n\n\n  return (\n    <Box className={style.form_container}>\n      <h2 className={style.form_title}>LOG IN</h2>\n      <Grid className={style.form_grid}>\n        {/* login form */}\n\n        <FormControl variant=\"standard\">\n          <form onSubmit={handleSubmit}> {/*pass validatioon schema */}\n            <TextField\n              className={style.email_input}\n              variant=\"standard\"\n              label=\"Email\"\n              type=\"email\"\n              name=\"email\"\n              fullWidth\n              margin=\"normal\"\n              required\n              error={focusedField === 'email' && !isEmailValid}\n              // styles the input field and checks whether email is not valid and when it is valid\n              helperText={!formData.email ? 'Required' : isEmailValid && formData.email.length >3 ? <p className={style.error_message_valid}>Checks out!</p> : <p className={style.error_message}>Not quite!</p>}\n              value={formData.email}\n              onChange={handleChange}\n              onFocus={() => setFocusedField('email')}\n            />\n           \n            <TextField\n              className={style.password_input}\n              variant=\"standard\"\n              label=\"Password\"\n              type=\"password\"\n              name=\"password\"\n              fullWidth\n              margin=\"normal\"\n              required\n              error={focusedField === 'password' && !isPasswordValid}\n              // styles the input field and checks whether password is not valid and when it is valid\n              helperText={!formData.password ? 'Required' : isPasswordValid ? <p className={style.error_message_valid}>Checks out!</p> : <p className={style.error_message}>Not quite!</p>}\n              value={formData.password}\n              onChange={handleChange}\n              onFocus={() => setFocusedField('password')}\n            />\n            {/* if password is not longer than 5 number and email is not longer than 5 chars then disable button  */}\n            {/* {isEmailValid && isPasswordValid ? (\n              <Box className={style.button_container}>\n                <Button variant=\"contained\" className={style.login_button}>\n                  Log In\n                </Button>\n                <Link to=\"/Register\">\n                  <Button variant=\"contained\" className={style.register_button}>\n                    Register\n                  </Button>\n                </Link>\n              </Box>\n            ) : ( */}\n              <Box className={style.button_container}>\n                <Button\n                  variant=\"contained\"\n                  type='submit'\n                  disabled={!isEmailValid || !isPasswordValid}\n                  className={style.login_button}\n                >\n                  Log In\n                </Button>\n                <Link to=\"/Register\">\n                  <Button variant=\"contained\" className={style.register_button}>\n                    Register\n                  </Button>\n                </Link>\n              </Box>\n            \n          </form>\n        </FormControl>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default LoginForm;\n","import React from 'react'\nimport LoginForm from '../../components/LoginForm/LoginForm'\n\nfunction Login() {\n  return (\n    // imported my form here to see it get rendered \n    <div className=\"background mainBackground\">\n      <LoginForm />\n    </div>\n  )\n}\n\nexport default Login","import { createSelector } from 'reselect';\n\n// Select the registration slice from the Redux store\nconst selectRegistration = (state) => state.registration;\n\n// Select individual validation requirements\nexport const selectNameValidationReqs = createSelector(\n  [selectRegistration],\n  (registration) => registration.validationReqs.name\n);\n\nexport const selectEmailValidationReqs = createSelector(\n  [selectRegistration],\n  (registration) => registration.validationReqs.email\n);\n\nexport const selectPasswordValidationReqs = createSelector(\n  [selectRegistration],\n  (registration) => registration.validationReqs.password\n);\n\n// Select individual field validation states - this works then?\nexport const selectIsNameValid = createSelector(\n  [selectRegistration],\n  (registration) => registration.isNameValid\n);\n\nexport const selectIsEmailValid = createSelector(\n  [selectRegistration],\n  (registration) => registration.isEmailValid\n);\n\nexport const selectIsPasswordValid = createSelector(\n  [selectRegistration],\n  (registration) => registration.isPasswordValid\n);\n\n// Select the overall form validity\nexport const selectFormIsValid = createSelector(\n  [selectIsNameValid, selectIsEmailValid, selectIsPasswordValid],\n  (isNameValid, isEmailValid, isPasswordValid) =>\n    isNameValid && isEmailValid && isPasswordValid\n);"],"names":["isEmailValid","useSelector","selectIsEmailValid","isPasswordValid","selectIsPasswordValid","dispatch","useDispatch","nav","useNavigate","useState","name","email","password","validationPopups","setValidationPopups","formData","setFormData","focusedField","setFocusedField","handleChange","e","fieldName","visible","target","value","validateEmail","fieldValue","validatePassword","loginError","setLoginError","login","response","toast","icon","console","log","payload","err","Box","className","style","Grid","FormControl","variant","onSubmit","preventDefault","handleLogin","TextField","label","type","fullWidth","margin","required","error","helperText","length","onChange","onFocus","Button","disabled","to","selectRegistration","state","registration","selectIsNameValid","createSelector","validationReqs","isNameValid","selectFormIsValid"],"sourceRoot":""}