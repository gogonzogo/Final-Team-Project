{"version":3,"file":"static/js/743.07f08c93.chunk.js","mappings":"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","sources":["webpack://final-team-project/./src/components/CaloriesCalc/CaloriesCalc.module.css?baa3","webpack://final-team-project/./src/components/Modal/modal.module.css?1a55","components/Modal/Modal.jsx","components/CaloriesCalc/CaloriesCalc.jsx","components/Container/Container.jsx","webpack://final-team-project/./src/components/CustomButton/CustomButton.module.css?2b5c","components/CustomButton/CustomButton.jsx","components/ValidationPopup/ValidationPopup.module.css","components/ValidationPopup/ValidationPopup.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"section\":\"CaloriesCalc_section__WB2nl\",\"heading\":\"CaloriesCalc_heading__fAzfD\",\"formdiv\":\"CaloriesCalc_formdiv__+a6k+\",\"calcform\":\"CaloriesCalc_calcform__iDf5l\",\"tabs\":\"CaloriesCalc_tabs__MkAfR\",\"positionWrapper\":\"CaloriesCalc_positionWrapper__+O-50\"};","// extracted by mini-css-extract-plugin\nexport default {\"modalBox\":\"modal_modalBox__UnNX8\",\"closeButton\":\"modal_closeButton__hYa4+\",\"backButtonMobbile\":\"modal_backButtonMobbile__r5QHQ\",\"back\":\"modal_back__V8JNM\",\"modalTitle\":\"modal_modalTitle__3zeL5\",\"totalCaloriesNumber\":\"modal_totalCaloriesNumber__bUxLg\",\"totalCalories\":\"modal_totalCalories__U80Ut\",\"notEat\":\"modal_notEat__P-szP\",\"hr\":\"modal_hr__CzLPQ\",\"text2\":\"modal_text2__9c6ek\",\"notEatItem\":\"modal_notEatItem__hXM4C\",\"buttonWrapper\":\"modal_buttonWrapper__NZCpm\",\"button\":\"modal_button__GRC0s\"};","import {\n  Backdrop,\n  Box,\n  Button,\n  Fade,\n  Modal as MaterialModal,\n} from '@mui/material';\nimport { Link } from 'react-router-dom';\nimport s from './modal.module.css';\n\nconst Modal = props => {\n  const { handleClose, modalState } = props;\n  return (\n    <MaterialModal\n      open={modalState.open}\n      onClose={handleClose}\n      closeAfterTransition\n      slots={{ backdrop: Backdrop }}\n      slotProps={{\n        backdrop: {\n          timeout: 500,\n          sx: { backgroundColor: '#2121211f' },\n        },\n      }}\n    >\n      <Fade in={modalState.open}>\n        <Box>\n          <div className={s.backButtonMobbile}>\n            <span className={s.back} onClick={handleClose}>\n              ⏎\n            </span>\n          </div>\n          <div className={s.modalBox}>\n            <span className={s.closeButton} onClick={handleClose}>\n              ✕\n            </span>\n            <p className={s.modalTitle}>\n              Your recommended daily\n              <br /> calorie intake is\n            </p>\n            <b className={s.totalCalories}>\n              <span className={s.totalCaloriesNumber}>\n                {Math.round(modalState.totalCalories)}{' '}\n              </span>\n              kcal\n            </b>\n            <div className={s.notEat}>\n              <hr className={s.hr} />\n              <b className={s.text2}>Foods you should not eat</b>\n              <ol>\n                {modalState.foodNotToEat.slice(0).map(listItem => (\n                  <li className={s.notEatItem} key={listItem._id}>\n                    {listItem.title}\n                  </li>\n                ))}\n              </ol>\n              <Link to=\"Login\" className={s.buttonWrapper}>\n                <Button className={s.button} variant=\"contained\">\n                  Start losing weight\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </Box>\n      </Fade>\n    </MaterialModal>\n  );\n};\nexport default Modal;\n","import React from 'react';\nimport css from './CaloriesCalc.module.css';\nimport { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Tab, Tabs } from '@mui/material';\nimport Radio from '@mui/material/Radio';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\n// import FormControl from '@mui/material/FormControl';\nimport FormLabel from '@mui/material/FormLabel';\nimport TextField from '@mui/material/TextField';\nimport Modal from 'components/Modal/Modal';\nimport ValidationPopup from '../ValidationPopup/ValidationPopup';\nimport {\n  validateHeight,\n  validateAge,\n  validateCurrent,\n  validateDesired,\n  validateBlood,\n} from '../../redux/validation/calculateCalsSlice';\nimport {\n  validateHeightFeet,\n  validateHeightInch,\n  validateCurrentLbs,\n  validateDesiredLbs,\n} from '../../redux/validation/calculateCalsSlice';\nimport { storeCalulator } from '../../redux/Calc/calcSlice';\nimport CustomButton from 'components/CustomButton/CustomButton';\nimport { CalNoEat, sendCalculator } from '../../redux/Calc/calcOperations';\nimport { useAuth } from '../../hooks/useAuth';\n\nconst CaloriesCalc = () => {\n  const {loggedIn} = useAuth();\n  const dispatch = useDispatch();\n  const validHeight = useSelector(state => state.calculate.isHeightValid);\n  const validAge = useSelector(state => state.calculate.isAgeValid);\n  const validcurrent = useSelector(state => state.calculate.isCurrentValid);\n  const validDesired = useSelector(state => state.calculate.isDesiredValid);\n  const validBlood = useSelector(state => state.calculate.isBloodValid);\n  const isFormValid =\n    validHeight && validAge && validcurrent && validDesired && validBlood\n      ? true\n      : false;\n\n  const validHeightFeet = useSelector(\n    state => state.calculate.isHeightFeetValid\n  );\n  const validHeightInch = useSelector(\n    state => state.calculate.isHeightInchValid\n  );\n  const validcurrentLbs = useSelector(\n    state => state.calculate.isCurrentLbsValid\n  );\n  const validDesiredLbs = useSelector(\n    state => state.calculate.isDesiredLbsValid\n  );\n  const isStandardFormValid =\n    validHeightFeet &&\n    validHeightInch &&\n    validAge &&\n    validcurrentLbs &&\n    validDesiredLbs &&\n    validBlood\n      ? true\n      : false;\n\n  const returnedCal = useSelector(state => state.calCalories.cals.value);\n\n  const [validationPopups, setValidationPopups] = useState({\n    weight: false,\n    age: false,\n    currentWeight: false,\n    desiredWeight: false,\n    bloodType: false,\n  });\n\n  const [currentTabIndex, setCurrentTabIndex] = useState(0);\n\n  const handleTabChange = (e, tabIndex) => {\n    setCurrentTabIndex(tabIndex);\n  };\n  const [focusedField, setFocusedField] = useState(null);\n\n  const toggleValidationPopup = (fieldName, visible) => {\n    setValidationPopups({ ...validationPopups, [fieldName]: visible });\n  };\n\n  const validationReqs = useSelector(state => state.calculate.validationReqs);\n\n  const [modalState, setModalState] = useState({\n    open: false,\n    totalCalories: null,\n    foodNotToEat: [],\n  }); //modal state and setters\n\n  const handleOpen = passinfo => {\n    setModalState({\n      open: true,\n      totalCalories: passinfo.totalCalories,\n      foodNotToEat: passinfo.notAllowedFood,\n    });\n  };\n  const handleClose = () => {\n    setModalState(prev => {\n      return {\n        ...prev,\n        open: false,\n      };\n    });\n    setTimeout(() => {\n      // fixing effect, when during closing modal you see 0 kcal recommended daily calorie intake\n      setModalState({ open: false, totalCalories: null, foodNotToEat: [] });\n    }, 250);\n  };\n\n  const [formData, setFormData] = useState({\n    height: returnedCal.height,\n    age: returnedCal.age,\n    currentWeight: returnedCal.currentWeight,\n    desiredWeight: returnedCal.desiredWeight,\n    bloodType: returnedCal.bloodType,\n    heightFeet: returnedCal.heightFeet,\n    heightInch: returnedCal.heightInch,\n    currentWeightLbs: returnedCal.currentWeightLbs,\n    desiredWeightLbs: returnedCal.desiredWeightLbs,\n  });\n\n  const changeHandler = e => {\n    const { name, value } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value,\n    });\n    switch (name) {\n      case 'height':\n        dispatch(validateHeight({ fieldValue: value }));\n        break;\n      case 'heightFeet':\n        dispatch(validateHeightFeet({ fieldValue: value }));\n        break;\n      case 'heightInch':\n        dispatch(validateHeightInch({ fieldValue: value }));\n        break;\n      case 'age':\n        dispatch(validateAge({ fieldValue: value }));\n        break;\n      case 'currentWeight':\n        dispatch(validateCurrent({ fieldValue: value }));\n        break;\n      case 'currentWeightLbs':\n        dispatch(validateCurrentLbs({ fieldValue: value }));\n        break;\n      case 'desiredWeight':\n        dispatch(validateDesired({ fieldValue: value }));\n        break;\n      case 'desiredWeightLbs':\n        dispatch(validateDesiredLbs({ fieldValue: value }));\n        break;\n      case 'bloodType':\n        dispatch(validateBlood({ fieldValue: value }));\n        break;\n      default:\n        break;\n    }\n    if (currentTabIndex === 1) {\n      const { heightFeet, heightInch, currentWeightLbs, desiredWeightLbs } =\n        formData;\n      setFormData(formData => {\n        return {\n          ...formData,\n          height: (heightFeet * 12 + heightInch * 1) * 2.54,\n          currentWeight: currentWeightLbs * 0.454,\n          desiredWeight: desiredWeightLbs * 0.454,\n        };\n      });\n    }\n    setFocusedField(name);\n    toggleValidationPopup(name, true);\n  };\n\n  const renderValidationPopup = () => {\n    return (\n      <ValidationPopup\n        validationData={validationReqs[focusedField]}\n        visible={focusedField}\n      />\n    );\n  };\n\n  const submitHandler = async e => {\n    e.preventDefault();\n    if (currentTabIndex === 1) {\n      const { heightFeet, heightInch, currentWeightLbs, desiredWeightLbs } =\n        formData;\n      await setFormData(formData => {\n        return {\n          ...formData,\n          height: (heightFeet * 12 + heightInch * 1) * 2.54,\n          currentWeight: currentWeightLbs * 0.454,\n          desiredWeight: desiredWeightLbs * 0.454,\n        };\n      });\n    }\n\n    const { height, age, currentWeight, desiredWeight, bloodType } = formData;\n    dispatch(\n      storeCalulator({\n        height: height,\n        age: age,\n        currentWeight: currentWeight,\n        desiredWeight: desiredWeight,\n        bloodType: bloodType,\n      })\n    );\n    const entedInfo = {\n      currentWeight,\n      height,\n      age,\n      desiredWeight,\n      bloodType,\n    };\n    try {\n      const response = await dispatch(CalNoEat(entedInfo));\n      const passinfo = response.payload.data;\n      \n        if (loggedIn) {\n          let convertBlood = 0\n          switch (bloodType) {\n            case 'A':\n              convertBlood = 1;\n              break;\n            case 'B':\n              convertBlood = 2;\n              break;\n            case 'AB':\n              convertBlood = 3;\n              break;\n            case 'O':\n              convertBlood = 4;\n              break;\n            default:\n              convertBlood = 1;\n              break;\n          }\n      \n          let mestype = '';\n          if (currentTabIndex === 0) { mestype = 'M' } else { mestype = 'M' }\n          const CalculatorInfo = {\n            height,\n            age,\n            bloodType: convertBlood,\n            currentWeight,\n            desiredWeight,\n            totalCalories: passinfo.totalCalories,\n            measurementType: mestype,\n            originalWeight: 0\n\n          };\n          const Calcresponse = await dispatch(sendCalculator(CalculatorInfo));\n        console.log(Calcresponse)\n      }\n      if (!loggedIn) {\n        handleOpen(passinfo);\n      }\n    } catch (error) {\n      console.error('returned Error', error.message);\n    }\n  };\n\n  return (\n    <>\n      <div className={css.positionWrapper}>\n        <div className={css.section}>\n          <div className={css.calcWrapper}>\n            <h1 className={css.heading}>Calculate your daily calorie</h1>\n            <h1 className={css.heading}>intake right now</h1>\n\n            <div className={css.tabs}>\n              <Tabs\n                orientation=\"vertical\"\n                value={currentTabIndex}\n                onChange={handleTabChange}\n                indicatorColor=\"transparent\"\n                sx={{\n                  '& button': {\n                    marginTop: '25px',\n                    paddingTop: '15px',\n                    width: '182px',\n                    padding: '1rem',\n                    margin: '2px',\n                    height: '44px',\n                    borderRadius: '30px',\n                    fontFamily: 'Verdana',\n                    fontSize: '14px',\n                    fontWeight: 700,\n                    textTransform: 'capitalize',\n                    backgroundColor: '#fc842d',\n                    border: 'solid #fc842d',\n                  },\n                  '& button:focus': {\n                    backgroundColor: '#ffffff',\n                    border: 'solid #fc842d',\n                    boxShadow:\n                      ' 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23)',\n                  },\n                  '& button:hover': {\n                    backgroundColor: '#ffffff',\n                    color: '#fc842d',\n                    border: 'solid #fc842d',\n                    boxShadow:\n                      ' 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23)',\n                  },\n                }}\n              >\n                <Tab label=\"Metric\" />\n                <Tab label=\"Standard US\" />\n              </Tabs>\n            </div>\n\n            {/* TAB 1 Contents */}\n            {currentTabIndex === 0 && (\n              <form className={css.calcform} onSubmit={submitHandler}>\n                <div className={css.formdiv}>\n                  <TextField\n                    sx={{\n                      '& .MuiOutlinedInput-root.Mui-focused': {\n                        '& > fieldset': {\n                          borderColor: 'orange',\n                        },\n                      },\n\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    margin=\"normal\"\n                    InputLabelProps={{ style: { color: '#9B9FAA' } }}\n                    type=\"tel\"\n                    inputprops={{ inputprops: { min: 122, max: 214 } }}\n                    label=\"Height *\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.height}\n                    name=\"height\"\n                    onFocus={() => setFocusedField('height')}\n                    onBlur={() => setFocusedField(null)}\n                  />\n                  {focusedField === 'height' && (\n                    <ValidationPopup\n                      validationData={validationReqs[focusedField]}\n                      visible={focusedField}\n                    />\n                  )}\n                  <TextField\n                    sx={{\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    margin=\"normal\"\n                    InputLabelProps={{ style: { color: '#9B9FAA' } }}\n                    type=\"tel\"\n                    inputprops={{ inputprops: { min: 18, max: 80 } }}\n                    label=\"Age *\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.age}\n                    name=\"age\"\n                    onFocus={() => setFocusedField('age')}\n                    onBlur={() => setFocusedField(null)}\n                  />\n                  {focusedField === 'age' && (\n                    <ValidationPopup\n                      validationData={validationReqs[focusedField]}\n                      visible={focusedField}\n                    />\n                  )}\n                  <TextField\n                    sx={{\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    margin=\"normal\"\n                    InputLabelProps={{ style: { color: '#9B9FAA' } }}\n                    type=\"tel\"\n                    inputprops={{ inputprops: { min: 34, max: 181 } }}\n                    label=\"Current Weight *\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.currentWeight}\n                    name=\"currentWeight\"\n                    onFocus={() => setFocusedField('currentWeight')}\n                    onBlur={() => setFocusedField(null)}\n                  />\n                  {focusedField === 'currentWeight' && (\n                    <ValidationPopup\n                      validationData={validationReqs[focusedField]}\n                      visible={focusedField}\n                    />\n                  )}\n                </div>\n                <div className={css.formdiv}>\n                  <TextField\n                    sx={{\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    margin=\"normal\"\n                    InputLabelProps={{ style: { color: '#9B9FAA' } }}\n                    type=\"tel\"\n                    inputprops={{ inputprops: { min: 34, max: 181 } }}\n                    label=\"Desired Weight *\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.desiredWeight}\n                    name=\"desiredWeight\"\n                    onFocus={() => setFocusedField('desiredWeight')}\n                    onBlur={() => setFocusedField(null)}\n                  />\n                  {focusedField === 'desiredWeight' && (\n                    <ValidationPopup\n                      validationData={validationReqs[focusedField]}\n                      visible={focusedField}\n                    />\n                  )}\n                  <FormLabel\n                    id=\"demo-radio-buttons-group-label\"\n                    sx={{\n                      marginTop: '20px',\n                    }}\n                  >\n                    Blood Type\n                  </FormLabel>\n\n                  <RadioGroup\n                    aria-labelledby=\"demo-controlled-radio-buttons-group\"\n                    value={formData.bloodType}\n                    name=\"bloodType\"\n                    sx={{\n                      flexDirection: 'row',\n                    }}\n                    onChange={changeHandler}\n                    onFocus={() => setFocusedField('bloodType')}\n                    onBlur={() => setFocusedField(null)}\n                  >\n                    <FormControlLabel\n                      value=\"A\"\n                      control={\n                        <Radio\n                          sx={{\n                            '&.Mui-checked': {\n                              color: '#FC842D',\n                            },\n                          }}\n                        />\n                      }\n                      label=\"1\"\n                    />\n                    <FormControlLabel\n                      value=\"B\"\n                      control={\n                        <Radio\n                          sx={{\n                            '&.Mui-checked': {\n                              color: '#FC842D',\n                            },\n                          }}\n                        />\n                      }\n                      label=\"2\"\n                    />\n                    <FormControlLabel\n                      value=\"AB\"\n                      control={\n                        <Radio\n                          sx={{\n                            '&.Mui-checked': {\n                              color: '#FC842D',\n                            },\n                          }}\n                        />\n                      }\n                      label=\"3\"\n                    />\n                    <FormControlLabel\n                      value=\"O\"\n                      control={\n                        <Radio\n                          sx={{\n                            '&.Mui-checked': {\n                              color: '#FC842D',\n                            },\n                          }}\n                        />\n                      }\n                      label=\"4\"\n                    />\n                  </RadioGroup>\n                  {focusedField === 'bloodType' && (\n                    <ValidationPopup\n                      validationData={validationReqs[focusedField]}\n                      visible={focusedField}\n                    />\n                  )}\n                </div>\n                <CustomButton className={css.customButton}\n                  color=\"orange\"\n                  size=\"wide\"\n                  disabled={!isFormValid}\n                >\n                  Start losing weight\n                </CustomButton>\n              </form>\n            )}\n            {/*  Standard US Contents */}\n            {currentTabIndex === 1 && (\n              <form className={css.calcform} onSubmit={submitHandler}>\n                <div className={css.formdiv}>\n                  <TextField\n                    sx={{\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    margin=\"normal\"\n                    InputLabelProps={{ style: { color: '#9B9FAA' } }}\n                    type=\"tel\"\n                    label=\"Height Feet *\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.heightFeet}\n                    name=\"heightFeet\"\n                    onFocus={() => setFocusedField('heightFeet')}\n                    onBlur={() => setFocusedField(null)}\n                  />\n                  <TextField\n                    sx={{\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    margin=\"normal\"\n                    InputLabelProps={{ style: { color: '#9B9FAA' } }}\n                    type=\"tel\"\n                    label=\"Height Inch *\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.heightInch}\n                    name=\"heightInch\"\n                    onFocus={() => setFocusedField('heightInch')}\n                    onBlur={() => setFocusedField(null)}\n                  />\n\n                  <TextField\n                    sx={{\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    margin=\"normal\"\n                    InputLabelProps={{ style: { color: '#9B9FAA' } }}\n                    type=\"tel\"\n                    inputprops={{ inputprops: { min: 18, max: 80 } }}\n                    label=\"Age *\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.age}\n                    name=\"age\"\n                    onFocus={() => setFocusedField('age')}\n                    onBlur={() => setFocusedField(null)}\n                  />\n                </div>\n                <div className={css.formdiv}>\n                  <TextField\n                    sx={{\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    margin=\"normal\"\n                    InputLabelProps={{ style: { color: '#9B9FAA' } }}\n                    type=\"tel\"\n                    inputprops={{ inputprops: { min: 34, max: 181 } }}\n                    label=\"Current Weight Lbs *\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.currentWeightLbs}\n                    name=\"currentWeightLbs\"\n                    onFocus={() => setFocusedField('currentWeightLbs')}\n                    onBlur={() => setFocusedField(null)}\n                  />\n                  <TextField\n                    sx={{\n                      fontFamily: 'Verdana',\n                      fontSize: '14px',\n                      fontWeight: '700',\n                      lineHeight: '17px',\n                      letterSpacing: '0.04em',\n                      textAlign: 'left',\n                      width: '272px',\n                      paddingRight: '32px',\n                    }}\n                    margin=\"normal\"\n                    InputLabelProps={{ style: { color: '#9B9FAA' } }}\n                    type=\"tel\"\n                    inputprops={{ inputprops: { min: 34, max: 181 } }}\n                    label=\"Desired Weight Lbs *\"\n                    variant=\"standard\"\n                    onChange={changeHandler}\n                    value={formData.desiredWeightLbs}\n                    name=\"desiredWeightLbs\"\n                    onFocus={() => setFocusedField('desiredWeightLbs')}\n                    onBlur={() => setFocusedField(null)}\n                  />\n                  <FormLabel\n                    id=\"demo-radio-buttons-group-label\"\n                    sx={{\n                      marginTop: '20px',\n                    }}\n                  >\n                    Blood Type\n                  </FormLabel>\n                  <RadioGroup\n                    aria-labelledby=\"demo-controlled-radio-buttons-group\"\n                    value={formData.bloodType}\n                    name=\"bloodType\"\n                    sx={{\n                      flexDirection: 'row',\n                    }}\n                    onChange={changeHandler}\n                    onFocus={() => setFocusedField('bloodType')}\n                    onBlur={() => setFocusedField(null)}\n                  >\n                    <FormControlLabel\n                      value=\"A\"\n                      control={\n                        <Radio\n                          sx={{\n                            '&.Mui-checked': {\n                              color: '#FC842D',\n                            },\n                          }}\n                        />\n                      }\n                      label=\"A\"\n                    />\n                    <FormControlLabel\n                      value=\"B\"\n                      control={\n                        <Radio\n                          sx={{\n                            '&.Mui-checked': {\n                              color: '#FC842D',\n                            },\n                          }}\n                        />\n                      }\n                      label=\"B\"\n                    />\n                    <FormControlLabel\n                      value=\"AB\"\n                      control={\n                        <Radio\n                          sx={{\n                            '&.Mui-checked': {\n                              color: '#FC842D',\n                            },\n                          }}\n                        />\n                      }\n                      label=\"AB\"\n                    />\n                    <FormControlLabel\n                      value=\"O\"\n                      control={\n                        <Radio\n                          sx={{\n                            '&.Mui-checked': {\n                              color: '#FC842D',\n                            },\n                          }}\n                        />\n                      }\n                      label=\"O\"\n                    />\n                  </RadioGroup>\n                </div>\n\n                {renderValidationPopup()}\n                <CustomButton\n                  color=\"orange\"\n                  size=\"wide\"\n                  disabled={!isStandardFormValid}\n                >\n                  Start losing weight\n                </CustomButton>\n              </form>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <Modal handleClose={handleClose} modalState={modalState} />\n    </>\n  );\n};\n\nexport default CaloriesCalc;\n","import { node, string } from 'prop-types';\n\nconst Container = ({children, className}) => {\n    return (\n        <div className={className}>{children}</div>\n    )\n};\n\nContainer.propTopes = {\n    children: node.isRequired,\n    className: string\n};\n\nexport default Container ;","// extracted by mini-css-extract-plugin\nexport default {\"Button\":\"CustomButton_Button__wxqQ9\",\"orange\":\"CustomButton_orange__JhdH3\",\"white\":\"CustomButton_white__PAugr\",\"disabled\":\"CustomButton_disabled__zn-Hl\",\"wide\":\"CustomButton_wide__0zS2P\"};","import PropTypes from 'prop-types';\nimport css from './CustomButton.module.css';\nimport { Button as MuiButton } from '@mui/material';\nimport clsx from 'clsx';\n\nconst CustomButton = ({ color, size, children, disabled, className, style, ...restProps }) => {\n  return (\n    <MuiButton\n      className={clsx(\n        css.Button,\n        css[color],\n        css[size],\n        { [css.disabled]: disabled },\n        className \n      )}\n      style={style}\n      type=\"submit\"\n      disabled={disabled}\n      {...restProps}\n    >\n      {children}\n    </MuiButton>\n  );\n};\n\nCustomButton.propTypes = {\n  color: PropTypes.string.isRequired,\n  size: PropTypes.string,\n  children: PropTypes.node.isRequired,\n  disabled: PropTypes.bool,\n  className: PropTypes.string, \n  style: PropTypes.object,\n};\n\nexport default CustomButton;\n","// extracted by mini-css-extract-plugin\nexport default {};","import React from 'react';\nimport { Paper, List, ListItem, ListItemText } from '@mui/material';\nimport CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\nimport css from './ValidationPopup.module.css';\n\nconst ValidationPopup = ({ validationData, visible }) => {\n  return (\n    <Paper elevation={8} className={css.validationPopup}>\n      <List className={css.validationPopupList} sx={{ width: '100%', maxWidth: 360 }}>\n        {visible && validationData\n          ? validationData.map((item, index) => {\n              const reqKey = Object.keys(item)[0];\n              const { id, message, met } = item[reqKey];\n              const IconComponent = met ? CheckCircleOutlineIcon : ErrorOutlineIcon;\n              const iconColor = met ? 'green' : 'red';\n              return (\n                <ListItem className={css.validationPopupItem} key={id} disableGutters>\n                  <IconComponent className={css.validationPopupIcon} style={{ color: iconColor }} />\n                  <ListItemText disableTypography primary={message} sx={{ fontSize: '12px' }} />\n                </ListItem>\n              );\n            })\n          : null}\n      </List>\n    </Paper>\n  );\n};\n\nexport default ValidationPopup;"],"names":["props","handleClose","modalState","open","onClose","closeAfterTransition","slots","backdrop","Backdrop","slotProps","timeout","sx","backgroundColor","Fade","in","Box","className","s","onClick","Math","round","totalCalories","foodNotToEat","slice","map","listItem","title","_id","to","Button","variant","loggedIn","useAuth","dispatch","useDispatch","validHeight","useSelector","state","calculate","isHeightValid","validAge","isAgeValid","validcurrent","isCurrentValid","validDesired","isDesiredValid","validBlood","isBloodValid","isFormValid","validHeightFeet","isHeightFeetValid","validHeightInch","isHeightInchValid","validcurrentLbs","isCurrentLbsValid","validDesiredLbs","isDesiredLbsValid","isStandardFormValid","returnedCal","calCalories","cals","value","useState","weight","age","currentWeight","desiredWeight","bloodType","validationPopups","setValidationPopups","currentTabIndex","setCurrentTabIndex","focusedField","setFocusedField","validationReqs","setModalState","handleOpen","passinfo","notAllowedFood","height","heightFeet","heightInch","currentWeightLbs","desiredWeightLbs","formData","setFormData","changeHandler","e","fieldName","visible","target","name","validateHeight","fieldValue","validateHeightFeet","validateHeightInch","validateAge","validateCurrent","validateCurrentLbs","validateDesired","validateDesiredLbs","validateBlood","submitHandler","preventDefault","storeCalulator","entedInfo","CalNoEat","response","payload","data","convertBlood","mestype","CalculatorInfo","measurementType","originalWeight","sendCalculator","Calcresponse","console","log","error","message","css","Tabs","orientation","onChange","tabIndex","indicatorColor","marginTop","paddingTop","width","padding","margin","borderRadius","fontFamily","fontSize","fontWeight","textTransform","border","boxShadow","color","Tab","label","onSubmit","TextField","borderColor","lineHeight","letterSpacing","textAlign","paddingRight","InputLabelProps","style","type","inputprops","min","max","onFocus","onBlur","ValidationPopup","validationData","FormLabel","id","RadioGroup","flexDirection","FormControlLabel","control","Radio","CustomButton","size","disabled","prev","setTimeout","Container","children","propTopes","node","string","restProps","clsx","Paper","elevation","List","maxWidth","item","index","Object","keys","met","IconComponent","CheckCircleOutlineIcon","ErrorOutlineIcon","iconColor","ListItem","disableGutters","ListItemText","disableTypography","primary"],"sourceRoot":""}